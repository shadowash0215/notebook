{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Shadowash's notebook! \u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u6240\u5b66 \u53ef\u80fd\u4f1a\u52a0\u5165\u5176\u4e2d\u7684\u4e1c\u897f markdown LaTeX CSAPP ASM \u6570\u5b66\u5206\u6790 \u7ebf\u6027\u4ee3\u6570 (\u8981\u4ece\u624b\u5199\u6572\u6210\u4ee3\u7801\u597d\u75db\u82e6\u545c\u545c\u545c)","title":"Welcome to Shadowash's notebook!"},{"location":"#welcome-to-shadowashs-notebook","text":"","title":"Welcome to Shadowash's notebook!"},{"location":"#_1","text":"","title":"\u5c1d\u8bd5\u8bb0\u5f55\u4e00\u4e9b\u6240\u5b66"},{"location":"#_2","text":"markdown LaTeX CSAPP ASM \u6570\u5b66\u5206\u6790 \u7ebf\u6027\u4ee3\u6570 (\u8981\u4ece\u624b\u5199\u6572\u6210\u4ee3\u7801\u597d\u75db\u82e6\u545c\u545c\u545c)","title":"\u53ef\u80fd\u4f1a\u52a0\u5165\u5176\u4e2d\u7684\u4e1c\u897f"},{"location":"ASM/","text":"\u6c47\u7f16\u8bed\u8a00 3.9 \u4e00\u822c\u6765\u8bf4\uff0c\u4e09\u4e2a push+ \u4e00\u4e2a call \u8868\u793a\u7a0b\u5e8f\u5728\u8c03\u7528 main \u51fd\u6570\uff0c\u5176\u4e4b\u524d\u7684\u4ee3\u7801\u4e3a C \u8bed\u8a00\u7684\u521d\u59cb\u5316\u4ee3\u7801. OD \u4e2d F2 \u4e3a\u8bbe\u7f6e\u65ad\u70b9\uff0c F7 \u4e3a\u8ddf\u8e2a\u8fdb\u5165. \u6570\u636e\u7a97\u4e2d Ctrl+G \u53ef\u4ee5\u8ddf\u8e2a\u53d8\u91cf. \u6709\u67d0\u4e9b\u5546\u7528\u7684\u5bf9 exe \u8fdb\u884c\u538b\u7f29\u7684\u8f6f\u4ef6\uff0c\u5982 Pecompact\uff0cVmProtect \u53ef\u4ee5\u628a exe \u538b\u7f29\u4e3a exe \uff0c\u538b\u7f29\u4ee5\u540e\u7684 exe \u4e5f\u80fd\u53cc\u51fb\u8fd0\u884c. \u8f6f\u4ef6\u4f5c\u8005\u8c03\u7528\u4ee5\u4e0b\u51fd\u6570 sn sn = rsa(mac\uff0c\u79c1\u94a5) \u8f6f\u4ef6\u68c0\u6d4b sn \u662f\u5426\u6b63\u786e rsa = (sn\uff0c\u516c\u94a5) == mac nop\u6307\u4ee4\u6307\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0cno operation\uff0c\u673a\u5668\u7801\u4e3a 0x90. alt+backspace \u53ef\u5c06\u6539\u574f\u7684\u6307\u4ee4\u6062\u590d\u539f\u6837. \u641c\u7d22\u65f6\u4f7f\u7528\u8f83\u957f\u7684\u4e32\u4ee5\u83b7\u53d6\u60f3\u8981\u7684\u7ed3\u679c. \u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5de5\u5177\u5982 010editor \u6216 QuickView \u90fd\u53ef\u4ee5\u5bf9 password.exe \u8fdb\u884c\u641c\u7d22\u5e76\u4fee\u6539. 010editor \u4e2d\u6309 Ctrl+F \u8f93\u5165\u8981\u67e5\u627e\u7684\u4e32(Type \u8981\u6ce8\u610f\u4fee\u6539\u4e3a hex bytes). QV \u6253\u5f00 password.exe\uff0c\u6309\u56de\u8f66\u952e\u53ef\u4ee5\u5728 ascii/hex/asm \u4e09\u79cd\u6a21\u5f0f\u4e2d\u5207\u6362\uff0casm \u6a21\u5f0f\u6709\u4e24\u79cd: 16\u4f4d/32\u4f4d\uff0c\u6309 F2 \u5207\u6362(\u67e5\u770b\u6700\u4e0b\u65b9\u72b6\u6001\u680f\u6216\u5bc4\u5b58\u5668\u5b57\u6bcd\u6570). F7 \u8fdb\u884c\u641c\u7d22\uff0ctab \u952e\u5728 ascii/hex \u95f4\u5207\u6362\uff0c\u5de6\u4e0a\u89d2\u7f16\u8f91\u5185\u6709\u7c98\u8d34. F3 \u53ef\u5c06\u6539\u574f\u7684\u5185\u5bb9\u53d8\u4e3a\u539f\u6837\uff0ctab \u952e\u53ef\u4ece\u5de6\u4fa7\u673a\u5668\u8bed\u8a00\u5207\u6362\u5230\u53f3\u4fa7\u6c47\u7f16\u6307\u4ee4\uff0c\u8f93\u5165\u6c47\u7f16\u8bed\u8a00\u8fdb\u884c\u4fee\u6539\uff0calt+F9 \u4fdd\u5b58\u4fee\u6539\uff0cF1 \u53ef\u83b7\u53d6\u5e2e\u52a9. md5 \u52a0\u5bc6\u7b97\u6cd5(\u4f46\u5df2\u7ecf\u88ab\u8bc1\u660e\u65e0\u6cd5\u9632\u6b62\u78b0\u649e). .data #\u7f16\u8bd1\u6307\u793a\u8bed\u53e5\uff0c\u8868\u793a\u53d8\u91cf\u3001\u6570\u7ec4\u5b9a\u4e49\u4ece\u6b64\u5904\u5f00\u59cb.\u6c47\u7f16\u8bed\u8a00\u4e2d\u5355\u5f15\u53f7\u53ca\u53cc\u5f15\u53f7\u65e0\u533a\u522b\uff0c\u4ed6\u4eec\u65e2\u53ef\u4ee5\u5f15\u4f4f\u5355\u4e2a\u5b57\u7b26\uff0c\u53c8\u53ef\u4ee5\u5f15\u4f4f\u591a\u4e2a\u5b57\u7b26; #\u5b57\u7b26\u4e32\u672b\u5c3e\u5e76\u6ca1\u6709\u9690\u542b\u7684'\\0';\u5b9a\u4e49\u6570\u7ec4\u548c\u5b9a\u4e49\u53d8\u91cf\u65e0\u533a\u522b. result db 100 dup(0) #dup:duplicate # == char result={0} format db \"%d\"\uff0c0 prompt db \"The result\"\uff0c0 .code #\u7f16\u8bd1\u6307\u793a\u8bed\u53e5\uff0c\u5e2e\u52a9\u7f16\u8bd1\u5668\u8bc6\u522b\u4ee3\u7801\u4ece\u6b64\u5904\u5f00\u59cb main: #\u6807\u53f7 mov eax\uff0c0 mov ebx\uff0c1 next: add eax\uff0cebx #eax = eax + ebx add ebx\uff0c1 cmp ebx\uff0c100 #cmp:compare jbe next #jbe:jump if below or equal invoke wsprintf\uff0coffset result\uff0coffset format\uff0ceax #wsprintf \u548c MessageboxA \u662f Windows \u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u51fd\u6570 offset \u4e3a\u53d6\u5730\u5740. # == wsprintf(&result[0]\uff0c&format[0]\uff0ceax); \u5c06 eax \u4e2d\u7684\u5185\u5bb9\u4ee5 char \u7c7b\u578b format \u6570\u7ec4\u7684\u683c\u5f0f\u8f93\u51fa\u5230 char \u7c7b\u578b result \u6570\u7ec4\u4e2d. # == wsprintf(result\uff0cformat\uff0ceax) result \u4e2d\u5c06\u5305\u542b\"5050\" \"%d\". invoke MessageBoxA\uff0c0\uff0coffset result\uff0coffset prompt\uff0c0 #\u79f0\u4e3a API (Application Program Interface). MessageboxA(0\uff0cformat\uff0cprompt\uff0c0) #\u6b63\u6587 \u6807\u9898 ret #return end main #\u6307\u5b9a\u7a0b\u5e8f\u7684\u8d77\u59cb\u6267\u884c\u70b9\u5373eip\u7684\u521d\u59cb\u503c\uff0cend \u540e\u9762\u7684\u6807\u53f7\u51b3\u5b9a\u4e86\u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6eip\u7684\u503c. .386 #\u8868\u793a\u4f1a\u7528\u523032\u4f4d\u7684\u5bc4\u5b58\u5668. code segment use16 #\u76f8\u5f53\u4e8e'{'\uff0cuse16\u8868\u793a\u4f7f\u752816\u4f4d\u7684\u5730\u5740. assume cs:code main: mov eax\uff0c0 mov ebx\uff0c1 next: add eax\uff0cebx add ebx\uff0c1 cmp ebx\uff0c100 jbe next code ends #\u76f8\u5f53\u4e8e'}' end main Win+R \u8f93\u5165 command \u6253\u5f00 DOS \u7ec8\u7aef\uff0c\u8fdb\u5165 D \u76d8\u4e2d\u7684 MASM \u76ee\u5f55\u4e2d\uff0cmasm name.asm \u751f\u6210 name.obj\uff0clink name.obj \u751f\u6210 name.exe. \u4f7f\u7528 td name.exe \u8fdb\u884c debug\uff0c\u6309 Ctrl+R/\u5728\u5bc4\u5b58\u5668\u754c\u9762\u5355\u51fb\u53f3\u952e\u5207\u636232\u4f4d/16\u4f4d\u7684\u5bc4\u5b58\u5668. cli \u662f\u4e00\u6761\u7279\u6743\u6307\u4ee4\uff0c\u542b\u4e49\u4e3a clear interrup\uff0c\u8868\u793a\u7981\u6b62\u786c\u4ef6\u4e2d\u65ad. Windows\u7684\u7528\u6237\u7a0b\u5e8f\u662f\u4e0d\u5141\u8bb8\u6267\u884c\u8be5\u6761\u6307\u4ee4\u7684. #\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u5e76\u5224\u65ad\u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd(getchar&putchar) .386 code segment use16 assume cs:code main: mov ah\uff0c 1 int 21h #AL = getchar()\uff0cint 21h \u662f\u4e00\u4e2a\u4e2d\u65ad\u96c6\uff0cint:interrupt\uff0c\u6307\u8f6f\u4ef6\u4e2d\u65ad\uff0cah = 1 \u8868\u793a\u8c03\u7528\u8be5\u4e2d\u65ad\u96c6\u4e2d\u76841\u53f7\u5b50\u4e2d\u65ad. cmp al\uff0c 'A' jb not_upper #jb:jump if below cmp al\uff0c 'Z' ja not_upper #ja:jump if above is_upper: mov ah\uff0c 2 mov dl\uff0c 'U' int 21h #putchar(DL) jmp exit not_upper: mov ah\uff0c 2 mov dl\uff0c 'O' int 21h exit: move ah\uff0c 4Ch move al\uff0c 0 int 21h #exit(0) code ends end main 3.16 data segment a db \"ABC\" s db \"Hello$World!\"\uff0c 0Dh\uff0c 0Ah \uff0c0 #\u51fd\u6570\u7ecf\u8fc7\u7f16\u8bd1\u540e\u53d8\u4e3a\u5176\u9996\u5730\u5740\uff0c\u6570\u7ec4\u7ecf\u8fc7\u7f16\u8bd1\u540e\u4e5f\u53d8\u4e3a\u5176\u9996\u5730\u5740.\u4e3a\u9632\u6b62\u4e0e\u5bc4\u5b58\u5668\u6df7\u6dc6\uff0c\u5b57\u6bcd\u5f00\u5934\u7684\u5341\u516d\u8fdb\u5236\u6570\u524d\u9700\u8981\u52a0\u4e0a0. # offset s \u79f0\u4e3a s \u7684\u504f\u79fb\u5730\u5740 = \u5176\u79bb data \u6bb5\u9996\u7684\u8ddd\u79bb = 3 # \u56de\u8f66 \u6362\u884c windows \u4e2d\u6362\u5230\u4e0b\u4e00\u884c\u884c\u9996\u9700\u8981\u56de\u8f66\u548c\u6362\u884c\u4e24\u4e2a\u64cd. # \"\\r\"\"\\n\" \u56de\u8f66:\u5149\u6807\u56de\u5230\u884c\u9996;\u6362\u884c:\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u540c\u4e00\u5217. data ends code segment assume cs:code\uff0cds:data main: mov ax\uff0cseg s # \u6216mov ax\uff0cdata;seg s:\u53d6\u6570\u7ec4 s \u7684\u6bb5\u5730\u5740.\u7f16\u8bd1\u65f6\u4f1a\u5c06 seg s \u7f16\u8bd1\u4e3a delta = (seg s - \u9996\u6bb5\u6bb5\u5730\u5740)\uff0c\u6b64\u5904\u4e3a0\uff0c\uff0c\u7f16\u8bd1\u540e\u5373 mov ax\uff0c0. # \u8fd0\u884c\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5373 dos \u4f1a\u5bf9 delta \u8fdb\u884c\u4fee\u6b63: delta += \u9996\u6bb5\u7684\u5b9e\u9645\u6bb5\u5730\u5740\uff0c\u6b64\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u91cd\u5b9a\u4f4d(relocating). # mov ax\uff0cseg s \u7f16\u8bd1\u540e\u7684\u673a\u5668\u8bed\u8a00\u4e3a B8 00 00\uff0c\u5047\u5b9a\u7a0b\u5e8f\u7684\u9996\u6bb5\u5730\u5740\u4e3a 1000h\uff0c\u5219\u7a0b\u5e8f\u8fd0\u884c\u65f6\u673a\u5668\u8bed\u8a00\u53d8\u4e3a B8 00 10. # \u673a\u5668\u80fd\u77e5\u9053\u6b64\u5904\u9700\u8981\u4fee\u6b63\u662f\u56e0\u4e3a\u7f16\u8bd1\u65f6\u751f\u6210\u4e86\u91cd\u5b9a\u5411\u8868\uff0c\u5bf9\u9700\u8981\u91cd\u5b9a\u5411\u7684\u4f4d\u7f6e\u8fdb\u884c\u4e86\u6807\u8bb0\uff0c\u6b64\u6807\u8bb0\u88ab\u5199\u5728\u6587\u4ef6\u5934\u4e2d. mov ds\uff0cax # ds:\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u53ea\u7528\u6765\u5b58\u50a8\u6807\u53f7\u6216\u53d8\u91cf\u7684\u6bb5\u5730\u5740\uff0c\u4e0d\u80fd\u63a5\u53d7\u5e38\u6570\u8d4b\u503c\uff0c\u53ea\u63a5\u53d7\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668/\u53d8\u91cf\u8d4b\u503c\uff0c\u53e6\u5916\u8fd8\u6709 cs\uff0css\uff0ces \u8fd9\u4e09\u4e2a\u6bb5\u5bc4\u5b58\u5668. mov bx\uff0c0 next: # s[i] = *(s+i) mov dl\uff0cs[bx] # \u7f16\u8bd1\u540e\u53d8\u6210 mov dl\uff0cds:[bx + 3];ds \u6307\u8be5\u6570\u7ec4\u5143\u7d20\u7684\u6bb5\u5730\u5740(segment address)\uff0c\u8be5\u6570\u7ec4\u5143\u7d20\u7684\u504f\u79fb\u5730\u5740\u4e3a 3\uff0c\u8be5\u5143\u7d20\u7684\u5b8c\u6574\u5730\u5740\u4e3a ds:bx + 3 cmp dl\uff0c0 je exit # je:jump if equal move ah\uff0c2 int 21h add bx\uff0c1 jmp next exit: # cs = seg exit = code \u7684\u6bb5\u5730\u5740. mov ah\uff0c4Ch int 21h code ends end main \u540c\u4e00\u4e2a\u6bb5\u5185\u6bcf\u4e00\u4e2a\u53d8\u91cf\u7684\u6bb5\u5730\u5740\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u6bb5\u9996\u5730\u5740\u53d6\u524d\u56db\u4f4d\uff0c\u4e2a\u4f4d\u5fc5\u987b\u4e3a0\uff0c\u504f\u79fb\u5730\u5740\u7684\u53d8\u5316\u8303\u56f4\u4e3a 0000h:FFFFh.\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u4e3a 10000h \u5b57\u8282\u5373 64k;\u6bb5\u548c\u6bb5\u53ef\u4ee5\u91cd\u53e0. |\u7269\u7406\u5730\u5740|\u76f8\u5bf9\u5730\u5740| |:----:|:----:| |12340h|00h| |12341h|01h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |12350h|33h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |12398h|33h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |12398h|55h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |2233Fh|77h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |2234Fh|99h| 16 \u4f4d\u7684 CPU \u6307\u5176\u6240\u6709\u5bc4\u5b58\u5668\u90fd\u662f 16 \u4f4d\u7684\u5bbd\u5ea6;ax\uff0cbx\uff0ccx\uff0cdx\uff0csi\uff0cdi\uff0cbp\uff0csp\uff0ccs\uff0cds\uff0ces\uff0css\uff0cip\uff0cFL. bx\uff0cbp\uff0csi\uff0cdi \u8868\u793a\u504f\u79fb\u5730\u5740\uff0ccs \u7ba1\u7406 code \u6bb5\uff0cds \u7ba1\u7406 data \u6bb5\uff0c\u4e24\u8005\u5fc5\u987b\u88ab\u8d4b\u503c. \u6807\u53f7\u6700\u7ec8\u4f1a\u8f6c\u5316\u4e3a\u5176\u504f\u79fb\u5730\u5740. ip \u662f \u6307\u4ee4\u6307\u9488(instruction pointer)\uff0c\u7528\u6765\u4fdd\u5b58\u5c06\u8981\u6267\u884c\u7684\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\uff0c\u800c cs \u5219\u662f\u7528\u6765\u4fdd\u5b58\u5c06\u8981\u6267\u884c\u7684\u6307\u4ee4\u7684\u6bb5\u5730\u5740\uff0c\u4e8e\u662f cs:ip \u7528\u6765\u6307\u5411\u8981\u6267\u884c\u7684\u90a3\u6761\u6307\u4ee4. FL \u662f\u6807\u5fd7(flag)\u5bc4\u5b58\u5668\uff0c\u5b83\u91cc\u9762\u768416\u4e2a\u4f4d\u5206\u522b\u4ee3\u8868\u4e0d\u540c\u7684\u610f\u4e49\uff0c\u5176\u4e2d\u6709\u4e9b bit \u8868\u793a\u6307\u4ee4\u6267\u884c\u4ee5\u540e\u7684\u72b6\u6001\uff0c\u6709\u4e9b\u5219\u53ef\u4ee5\u63a7\u5236 CPU \u7684\u884c\u4e3a. \u5982 FL \u7684\u7b2c0\u4f4d\u79f0\u4e3a CF \u4f4d\uff0c\u5176\u7528\u6765\u5b58\u50a8\u5f53\u524d\u6307\u4ee4\u7684\u8fdb\u4f4d. mov ax\uff0c0FFFFh add ax\uff0c1 ; AX = 0 \uff0c CF = 1 jnc no_carry_flag ;jnc:jump if not carry flag jc has_carry_flag ;jc:jump if carry flag has_carry_flag: date \u6bb5\u548c code \u6bb5\u662f\u8fde\u7eed\u7684. ds:[20] = cs:[0] 16\u4f4d\u7684 CPU \u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f(real mode)\u4e0b\uff0c\u7528\u6237\u4ee3\u7801\u62e5\u6709\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e00\u6837\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u6307\u4ee4\uff0c\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u5185\u5b58.32\u4f4d\u7684 CPU \u9664\u4e86\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f\u4e0b\u5916\uff0c\u8fd8\u53ef\u4ee5\u8fd0\u884c\u5728\u4fdd\u62a4\u6a21\u5f0f(protected mode)\u4e0b.\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u4ee3\u7801\u7684\u6743\u9650\u4f4e\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u6743\u9650\uff0c\u5e76\u4e0d\u80fd\u6267\u884c\u4efb\u4f55\u6307\u4ee4\uff0c\u4e0d\u80fd\u8d8a\u6743\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u53ca\u5176\u4ed6\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4. 32\u4f4d\u7684 CPU \u4e2d\uff0ccs\uff0cds\uff0ces\uff0css \u4ecd\u65e7\u4e3a16\u4f4d\u7684\u5bbd\u5ea6\uff0c\u5176\u4ed6\u5185\u5b58\u5668\u90fd\u53d8\u6210\u4e8632\u4f4d\uff0c\u5982 eax\uff0cebx\uff0cecx\uff0cedx\uff0cesi\uff0cedi\uff0cesp\uff0cebp\uff0ceip\uff0cEFL. 32\u4f4d\u7684 CPU \u6700\u591a\u53ef\u4ee5\u8bbf\u95ee 4G ( \\(2^{32}\\) )\u5b57\u8282\u5185\u5b58\u7a7a\u95f4. \u5b9e\u6a21\u5f0f\u548c\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u6bb5\u610f\u4e49\u4e0d\u540c\uff0c\u4f8b\u5982\u5f53 ds = 8\uff0cesi = 45678h \u65f6\uff0c\u6c42 ds:esi \u7684\u7269\u7406\u5730\u5740. gdt \u79f0\u4e3a\u5168\u5c40\u63cf\u8ff0\u7b26\u8868(global descriptor table)\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f8\u4e2a\u5b57\u8282. \u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\u53eb gdtr \u4f1a\u88ab\u8d4b\u503c\u4e3a gdt \u8868\u7684\u9996\u5730\u5740. \u8bbe gdt \u8868\u7684\u9996\u5730\u5740\u4e3a t: t + 0 -> gdt[0] t + 8 -> gdt[1] t + 10h -> gdt[2] t + 18h -> gdt[3] \u628a ds \u548c t \u76f8\u52a0\u6307\u5411 gdt[1]\uff0c\u5047\u5b9a gdt[1] \u76848\u5b57\u8282\u5982\u4e0b\u6240\u793a: 00 01 02 03 04 05 06 07 ->\u4e0b\u6807 FF, FF, 00, 00, 10, 93, 0F, 00 ->\u503c \u6bb5\u9996\u5730\u5740\u53d6\u7b2c2\uff0c3\uff0c4\uff0c7\u5b57\u8282\uff0c\u6b64\u5904\u4e3a00100000h\uff0c\u4e8e\u662f ds:45678h\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a: 00100000h + 45678h = 00145678h. \u7b2c0\uff0c1\u5b57\u8282\u4ee5\u53ca\u7b2c6\u5b57\u8282\u7684\u4f4e\u4f4d\u7528\u6765\u5b9a\u4e49\u6bb5\u5185\u7684\u6700\u5927\u504f\u79fb\u5730\u5740\uff0c\u6b64\u5904\u4e3a FFFFFh;\u7b2c6\u5b57\u8282\u7684\u9ad8\u4f4d\u8868. \u7b2c5\u5b57\u8282 93h \u7528\u6765\u89c4\u5b9a\u8fd9\u662f\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u4e14\u53ef\u8bfb\u53ef\u5199\uff0c\u89c4\u5b9a\u8be5\u6bb5\u7684\u8bbf\u95ee\u6743\u9650\u662f ring 0. 93h = 1 00 1 0011\uff0c\u6743\u9650\u7531\u659c\u4f53\u90e8\u5206\u51b3\u5b9a. 3.23 db, dw, dd, dq, dt 08, 16, 32, 64, 80 - db: char\uff0cb: byte; - dw: short int\uff0cw: word; - dd: long int or float\uff0cdouble words; - dq: __int64 or long long or double\uff0cq: quadruple words; - dt: long double\uff0c\"%Lf\". IEEE754 \u6807\u51c6\u4e2d\u5355\u7cbe\u5ea6\u5c0f\u6570(\u5373 float \u7c7b\u578b\u7684\u8868\u793a): 0 1000010 1 1111110 11000000 00000000 1\u4f4d\u7b26\u53f7\u4f4d\uff0c8\u4f4d\u6307\u6570\u4f4d\uff0c23\u4f4d\u5c3e\u6570.\u504f\u7f6e\u6307\u6570:a = (8\u4f4d\u65e0\u7b26\u53f7\u6570-127)\uff0c\u6700\u7ec8 *2^a\uff0c\u5728\u4e8c\u8fdb\u5236\u4e0a\u8868\u73b0\u4e3a\u5c3e\u6570\u5c0f\u6570\u70b9\u7684\u79fb\u52a8. \u9996\u5148\u8865\u4e00\u4e2a1\u548c\u5c0f\u6570\u70b9.1.11111101100000000000000->1111111.01100000000000000 \u7b97\u672f\u8fd0\u7b97: add\uff0csub \u52a0\u51cf;mul\uff0cdiv \u65e0\u7b26\u53f7\u6570\u4e58\u9664;imul\uff0cidiv \u6709\u7b26\u53f7\u6570\u4e58\u9664 mov ax\uff0c0FFFFh mov bx\uff0c0FFFFh mul bx # dx:ax = ax * bx = 0FFFF 0001h = 4294836225\uff0c\u5176\u4e2d dx = 0FFFFh\uff0cax = 0001h\uff0c\u8fd9\u91cc\u7684\u5192\u53f7\u8868\u793a\u9ad816\u4f4d\u548c\u4f4e16\u4f4d\u7684\u62fc\u63a5.16\u4f4d\u6570\u7684\u4e58\u6cd5\u9ed8\u8ba4\u88ab\u4e58\u6570\u4e3aax\uff0c\u4e14\u5b58\u653e\u4f4d\u7f6e\u9ed8\u8ba4\u4e3a dx:ax. mov ax\uff0c0FFFFh mov bx\uff0c0FFFFh imul bx # dx:ax = ax*bx = 0000 0001h \u6c47\u7f16\u8bed\u8a00\u7684\u53d8\u91cf\u5b9a\u4e49\u4e0d\u533a\u5206\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570. \u903b\u8f91\u8fd0\u7b97:and(&)\uff0cor(|)\uff0cxor(^)\uff0cnot(~)\uff0cshl(<<)\uff0cshr(>>)\uff0c rol(_rotl())\uff0cror(_rotr()) shl:shift left; shr:shift right; rol:rotate left; ror:rotate right mov ah\uff0c10110110B # rol\u524d 1011 0110 rol ah\uff0c1 # rol\u540e 0110 1101\uff0cCF = 1 .386 # \u63a5\u4e0b\u6765\u8981\u7528\u523032\u4f4d\u5bc4\u5b58\u5668\uff0c\u4e14\u504f\u79fb\u5730\u5740\u9ed8\u8ba4\u4e3a32\u4f4d. data segment use16 a dd 56789ABCh data ends code segment use16 assume cs:code ds:data main: mov ax\uff0cdata # mov ax\uff0cseg a mov ds\uff0cax # \u4fdd\u8bc1 ds \u6307\u5411 data \u6bb5. mov eax\uff0ca # \u56e0\u4e3a a \u9700\u8981\u7528\u5230\u6bb5\u5730\u5740. mov cx\uff0c8 again: rol eax\uff0c4 # eax = 6789ABC5h mov edx\uff0ceax and edx\uff0c0Fh # edx = 5 cmp edx\uff0c10 jae is_alpha add dl\uff0c'0' jmp out_put is_alpha: sub dl\uff0c10 add dl\uff0c'A' output: push eax mov ah\uff0c2 int 21h pop eax dec cx # dec:\u81ea\u51cf;inc:\u81ea\u589e code ends end main 3.30 1.\u76f4\u63a5\u5bfb\u5740 2.\u95f4\u63a5\u5bfb\u5740(\u7528\u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 + \u5e38\u6570\u6765\u8868\u793a\u53d8\u91cf\u7684\u504f\u79fb\u5730\u5740) cs\uff0cds\uff0ces\uff0css \u7528\u6765\u8868\u793a\u6bb5\u5730\u5740;sp\uff0cbp\uff0csi\uff0cdi \u7528\u6765\u8868\u793a\u504f\u79fb\u5730\u5740. sp \u548c ss \u7ed3\u5408\u5728\u4e00\u8d77\u6784\u6210 ss:sp \u6307\u5411\u5806\u6808\u7684\u9876\u7aef. \u5bc4\u5b58\u5668\u76f8\u52a0\u65f6\u53ea\u80fd\u4ee5 b \u5f00\u5934\u548c i \u7ed3\u5c3e\u7684\u5bc4\u5b58\u5668\u76f8\u52a0. a. [bx]\uff0c[bp]\uff0c[si]\uff0c[di]; b. [ax+2]\uff0c[bp-1]\uff0c[si+3]\uff0c[di-4]; c. [bx+si];[bx+di]\uff0c[bp+si]\uff0c[bp+di]; d. [bx+si+2]\uff0c[bx+di-2]\uff0c[bp+si+6]\uff0c[bp+di-6]. \u6c47\u7f16\u8bed\u8a00\u7684\u591a\u6570\u6307\u4ee4\u8981\u6c42\u4e24\u4e2a\u64cd\u4f5c\u6570\u7b49\u5bbd\uff0c\u53ea\u8981\u6709\u4e00\u65b9\u7684\u5bbd\u5ea6\u5df2\u77e5\uff0c\u53e6\u4e00\u65b9\u7684\u5bbd\u5ea6\u5fc5\u987b\u4e0e\u5176\u4e00\u81f4.\u82e5\u4e24\u8005\u5747\u4e0d\u660e\u786e\uff0c\u5219\u9700\u7ed9\u4e00\u65b9\u52a0\u4e0a\u5bbd\u5ea6\u7684\u9650\u5236.\u5e38\u6570\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u6ca1\u6709\u660e\u786e\u7684\u5bbd\u5ea6.\u5982: mov ds:[di]\uff0c0 #\u4e24\u8005\u5bbd\u5ea6\u5747\u4e0d\u660e\u786e\uff0c\u7f16\u8bd1\u4f1a\u62a5\u9519. \u6b63\u786e\u7684\u5199\u6cd5\u4e3a: mov byte ptr ds:[di]\uff0c0 \u7ffb\u8bd1\u4e3a C \u8bed\u8a00: *(char *)(ds:di) = 0; #ptr \u662f pointer \u7684\u7f29\u5199. mov word ptr ds:[di]\uff0c0 \u7ffb\u8bd1\u4e3a C \u8bed\u8a00: *(short int *)(ds:di) = 0 mov dword ptr ds:[di]\uff0c0 \u7ffb\u8bd1\u4e3a C \u8bed\u8a00: *(long int *)(ds:di) = 0 \u6216: mov al\uff0c0 mov ds:[di]\uff0cal \u6ce8\u610f\u5bbd\u5ea6\u4fee\u9970\u4e0d\u80fd\u7528\u4e8e\u5e38\u6570\uff0c\u53ea\u80fd\u4f5c\u7528\u4e8e\u53d8\u91cf. \u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528\u67d0\u4e2a\u53d8\u91cf\u65f6\uff0c \u8be5\u53d8\u91cf\u7684\u6bb5\u5730\u5740\u5fc5\u987b\u7528\u6bb5\u5bc4\u5b58\u5668\u8868\u793a\uff0c \u4e0d\u80fd\u7528\u5e38\u6570\u8868\u793a; \u504f\u79fb\u5730\u5740\u65e2\u53ef\u4ee5\u7528\u76f4\u63a5\u5bfb\u5740\u5373\u5e38\u6570\uff0c \u53c8\u53ef\u4ee5\u7528\u95f4\u63a5\u5bfb\u5740\u5373[]\u4e2d\u542b\u6709\u5bc4\u5b58\u5668\u8868\u793a. struct st { char name[8]; short int score; }a[10]; # \u5047\u5b9a ds = seg a\uff0c bx = offset a. \u73b0\u5728\u8981\u5c06 a[2].score \u8d4b\u503c\u7ed9 ax. mov si\uff0c20 mov ax\uff0cds:[bx+si+8] # ax = a[2].score # bx \u662f\u6570\u7ec4\u9996\u5143\u7d20\u7684\u5730\u5740\uff0c si \u662f a[0] \u5230 a[2] \u7684\u8ddd\u79bb\uff0c 8\u662f name \u6570\u7ec4\u7684\u957f\u5ea6. \u5728\u539f\u7a0b\u5e8f\u4e2d\u5f15\u7528\u53d8\u91cf: data segment abc db 1\uff0c2\uff0c3\uff0c4 xyz dw 789Ah\uff0c0BCDEh\uff0c9876h asd dd 12345678h\uff0c56789ABCh data ends code segment assume cs:code\uff0cds:data main: mov ax\uff0cdata mov ds\uff0cax # \u5f62\u5f0f 1 mov ah\uff0cabc[1] mov ah\uff0c[abc+1] # \u5f62\u5f0f 2 mov bx\uff0coffset abc mov ah\uff0c[bx+1] # \u5f62\u5f0f 3 mov bx\uff0c1 mov ah\uff0cabc[bx] mov ah\uff0c[abc+bx] # \u5f62\u5f0f 4 mov bx\uff0coffset abc mov si\uff0c1 mov ah\uff0c[bx+si] code ends end main assume \u7684\u4f5c\u7528\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u5f15\u7528\u67d0\u4e2a\u53d8\u91cf\u6216\u6807\u53f7\u7684\u6bb5\u5730\u5740\u66ff\u6362\u6210\u5bf9\u5e94\u7684\u6bb5\u5bc4\u5b58\u5668\uff0c \u4f46\u4ed6\u5e76\u4e0d\u4f1a\u5bf9\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u8d4b\u503c. assume cs:code\uff0cds:data \u662f\u7f16\u8bd1\u6307\u793a\u8bed\u53e5(directive)\uff0c\u7f16\u8bd1\u540e\u4e0d\u4f1a\u4ea7\u751f\u673a\u5668\u7801\uff0c\u4f46\u4f1a\u6d88\u5931. data segment a db 'a' end datas code1 segment assume cs:code1\uff0cds:data main: je far_away next: mov dl\uff0c[a] mov al\uff0c2 int 21h code1 ends je next code2 segment assume cs:code2 je next code2 ends end main \u6bb5\u5bc4\u5b58\u5668\u4f18\u5148\u7ea7: ds>ss>es>cs. \u5f53\u540c\u4e00\u4e2a\u6bb5\u540d\u548c\u591a\u4e2a\u6bb5\u5bc4\u5b58\u5668\u5efa\u7acb\u4e86\u5173\u8054\u65f6\uff0c\u9075\u5faa\u5982\u4e0a\u7684\u4f18\u5148\u7ea7\u987a\u5e8f. Bochs \u865a\u62df\u673a\u53ca\u5176\u5185\u7f6e\u8c03\u8bd5\u5668 Soft-ICE \u4ecb\u7ecd: Bochs \u4e0b\u8f7d\u89e3\u538b\u7f29\u540e\uff0cbochs\\bochsdbg.exe \u53cc\u51fb -> Load -> dos.bxrc -> Start -> Continue (\u89e3\u91ca\u6267\u884c) \u5e38\u89c4\u7684\u65ad\u70b9\u5373\u8f6f\u4ef6\u65ad\u70b9(software breakpoint)\u4f1a\u628a\u8bbe\u4e86\u65ad\u70b9\u7684\u6307\u4ee4\u7684\u9996\u5b57\u8282\u6539\u6210 0CCh \u8fd9\u4e2a\u673a\u5668\u7801\uff0c\u8be5\u673a\u5668\u7801\u5bf9\u5e94\u7684\u6307\u4ee4\u662f int 3.\u5f53\u8c03\u8bd5\u5668\u6267\u884c\u5230 int 3 \u65f6\u4f1a\u81ea\u52a8\u65ad\u4f4f\uff0c\u5373 int 3 \u76f8\u5f53\u4e8e\u4e00\u4e2a\u65ad\u70b9. TD \u53ea\u652f\u6301\u8f6f\u4ef6\u65ad\u70b9\uff0c\u4e0d\u652f\u6301\u786c\u4ef6\u65ad\u70b9.Soft-ICE \u65e2\u652f\u6301\u8f6f\u4ef6\u65ad\u70b9\uff0c\u53c8\u652f\u6301\u786c\u4ef6\u65ad\u70b9(hardware breakpoint).\u5176\u4e2d\u786c\u4ef6\u65ad\u70b9\u6709 3 \u79cd\u7c7b\u578b: bpmb \u5730\u5740 r:\u5f53\u5730\u5740\u5904\u7684\u53d8\u91cf\u503c\u88ab\u8bfb\u53d6\u65f6\u65ad\u4f4f; bpmb \u5730\u5740 w:\u5f53\u5730\u5740\u5904\u7684\u53d8\u91cf\u503c\u88ab\u5199\u5165\u65f6\u65ad\u4f4f; bpmb \u5730\u5740 x:\u5f53\u5730\u5740\u5904\u7684\u6307\u4ee4\u88ab\u6267\u884c\u65f6\u65ad\u4f4f. 80386 \u4ee5\u4e0a\u7684 CPU \u5728\u786c\u4ef6\u4e0a\u652f\u6301\u786c\u4ef6\u65ad\u70b9\u529f\u80fd\uff0c\u5f53\u8c03\u8bd5\u5668\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9\uff0c\u5b83\u4f1a\u628a\u65ad\u70b9\u5730\u5740\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 dr0\uff0cdr1\uff0cdr2\uff0cdr3\u4e2d\uff0c\u518d\u628a\u65ad\u70b9\u7684\u6761\u4ef6\u4fdd\u5b58\u5230 dr6 \u53ca dr7 \u4e2d.\u786c\u4ef6\u65ad\u70b9\u7684\u4e2a\u6570\u6700\u591a 4 \u4e2a.\u786c\u4ef6\u65ad\u70b9\u4e0d\u4f1a\u4fee\u6539\u53d8\u91cf\u6216\u6307\u4ee4\u7684\u5185\u5bb9. # \u68c0\u6d4b\u8bbe\u7f6e\u8f6f\u4ef6\u65ad\u70b9\u4f1a\u5c06\u6307\u4ee4\u9996\u5b57\u8282\u6539\u4e3a 0CCh. code segment assume cs:code main: cx\uff0c10 next: mov ah\uff0c2 # \u6b64\u5904\u8bbe\u4e00\u4e2a\u8f6f\u4ef6\u65ad\u70b9 mov dl\uff0c'A' int 21h mov al\uff0cbyte ptr [next] # \u7f16\u8bd1\u65f6\u4f1a\u8f6c\u4e3a mov al\uff0cbyte ptr code:[next]\uff0c # \u518d\u6839\u636e assume \u8f6c\u4e3a mov al\uff0cbyte ptr cs:[next] cmp al\uff0c0CCh je done sub cx\uff0c1 cmp cx\uff0c0 jnz next done: mov al\uff0c4Ch int 21h code ends end main 4.6 \u7528 winimage \u6253\u5f00 dos.img \u8fd9\u4e2a\u786c\u76d8\u955c\u50cf\u53ef\u4ee5\u5b9e\u73b0\u865a\u62df\u673a\u5185\u5916\u6587\u4ef6\u7684\u4ea4\u6362. \u627e\u5230 bochs\\dos.img \u53cc\u51fb bochs\\bochsdbg.exe \u53cc\u51fb\u542f\u52a8 bochs Load -> dos.bxrc -> Start \u590d\u5236 addr.c \u5230 bochs\\tc \u4e2d; cd\\tc tc: \u6309 Alt + F \u9009\u62e9\u83dc\u5355 file -> load -> addr.c \u6309 Alt + C \u9009\u62e9\u83dc\u5355 compile -> build all \u6309 Alt + F \u9009\u62e9\u83dc\u5355 file -> quit td addr \u7528\u6c47\u7f16\u8bed\u8a00\u63a7\u5236\u6587\u672c\u65b9\u5f0f\u4e0b\u6574\u4e2a\u5c4f\u5e55\u7684\u8f93\u51fa\uff1a (x,y) \u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740 = (y * 80 + x) * 2\uff0c\u663e\u5361\u6bb5\u5730\u5740\u56fa\u5b9a\u4e3a 0B800h. 0000:0000 ~ 0000:FFFF 1000:0000 ~ 1000:FFFF \u2026\u2026 9000:0000 ~ 9000:FFFF # dos \u53ca\u7528\u6237\u7a0b\u5e8f\u5360\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u957f\u5ea6\u4e3a 640 KB A000:0000 ~ A000:FFFF B000:0000 ~ B000:7FFF B800:0000 ~ B800:7FFF # \u6620\u5c04\u5230\u663e\u5361\u5185\u5b58 C000:0000 ~ C000:FFFF \u2026\u2026 F000:0000 ~ F000:FFFF # \u6620\u5c04\u5230 ROM(Read-Only-Memory) \u6620\u5c04\u662f\u5728\u7535\u8111\u542f\u52a8\u65f6\u6267\u884c ROM \u4e2d POST \u4ee3\u7801\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u7684; ROM \u4e2d\u8fd8\u5305\u62ec\u4e86 BIOS \u4ee3\u7801\uff0c\u5982 int 10h \u53ca int 16h \u4e2d\u65ad\u96c6\u5c31\u5b9a\u4e49\u5728 BIOS \u4e2d. code segment assume cs:code main: mov ax, 0B800h mov es, ax mov di, 0 mov al, 'A' mov ah, 71h # \u767d\u8272\u80cc\u666f\uff0c\u84dd\u8272\u524d\u666f mov cx, 2000 again: mov word ptr es:[di], ax # ax = 7141h add di, 2 sub cx, 1 jnz again end: mov ah, 1 int 21h # \u7b49\u5f85\u952e\u76d8\u6572\u952e mov ah, 4Ch int 21h code ends end main # C \u4e2d\u7684\u5b9e\u73b0 #include<stdio.h> int main() { unsigned char far *p; int i; p = (unsigned char far) } A000:0000 \u662f\u56fe\u5f62\u6a21\u5f0f (graphics mode) \u4e0b\u7684\u663e\u5361\u5730\u5740. mov ah, 0 mov al, 13h int 10h # \u628a\u663e\u5361\u5207\u6362\u5230 320 * 200 * 256 \u8272\u56fe\u5f62\u6a21\u5f0f # al = 12h \u8868\u793a 640 * 480 * 16 \u8272\u56fe\u5f62\u6a21\u5f0f # al = 3h \u8868\u793a (x, y) \u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740 = y * 320 + x. 4.13 again: mov ds:[di], ax mov bx, 800h wait_wait: mov dx, 0 wait_a_while: sub ds, 1 jnz wait_a_while sub bx, 1 jnz wait_wait mov word ptr ds:[di], 0020h add di, 2 sub cx, 1 jnz again mov ah, 1 \u952e\u76d8\u8f93\u5165\u9664\u4e86\u53ef\u4ee5\u8c03\u7528 int 21h/ah = 01h \u5916\uff0c\u8fd8\u53ef\u4ee5\u8c03\u7528 int 16h/ah = 00h \u5c5e\u4e8e BIOS \u4e2d\u65ad. int 21h/ah = 01h \u4e0d\u80fd\u8bfb\u53d6\u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u952e\u4e5f\u4e0d\u80fd\u8bfb\u53d6 PgUp PgDn Home End Insert Del F1~F12 \u8fd9\u4e9b\u952e. again: mov ah, 1 int 16h # \u68c0\u6d4b\u952e\u76d8\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de ZF = 1\uff0c\u5426\u5219\u8fd4\u56de ZF = 0 jz no_key has_key: mov ah, 0 int 16h # ax = \u6240\u6572\u952e\u7684\u7f16\u7801\uff0c\u6b64\u5904\u4ece\u952e\u76d8\u7f13\u51b2\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u952e\uff0c\u6839\u636e\u6240\u6572\u7684\u952e\u6267\u884c\u4e0d\u540c\u7684\u5206\u652f no_key: jmp again draw: mov ax, [y] mov bp, 80 mul bp # dx:ax = ax * bp add ax, [x] add ax, ax # \u6216 shl ax, 1 mov bx, ax mov es:[bx], 1720h check_key: # \u5237\u65b0\u5c4f\u5e55\u753b\u9762 mov ah, 1 int 16h jnz has_key jmp check_key has_key cmp ax, 4800h je is_up cmp ax, 5000h je is_up cmp ax, 4B00h je is_up cmp ax, 4800h je is_up jmp exit is_up: cmp [y], 0 je check_key dec [y] jmp draw push ax / push word ptr ds:[bx] push eax / push dword ptr ds:[bx] push ah \u6216 push al \u662f\u9519\u8bef\u7684\u7528\u6cd5\uff0c\u56e0\u4e3a push \u7684\u64cd\u4f5c\u6570\u53ea\u80fd\u662f 16 \u4f4d\u6216 32 \u4f4d pop ax / pop word ptr ds:[bx] pop eax / pop dword ptr ds:[bx] \u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u65f6\uff0cdos \u4f1a\u5bf9\u4ee5\u4e0b\u5bc4\u5b58\u5668\u505a\u521d\u59cb\u5316\u8d4b\u503c\uff1a cs = code ip = offset main ss = stk sp = 200h ds = es = psp \u6bb5\u5730\u5740 psp \u662f\u7a0b\u5e8f\u6bb5\u524d\u7f00(program segment prefix) \u5b83\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 100h \u5b57\u8282\u7684\u5185\u5b58\u5757\uff0c\u4f4d\u4e8e\u5f53\u524d\u7a0b\u5e8f\u9996\u6bb5\u7684\u524d\u9762\uff0cpsp \u7531\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7ed9\u5f53\u524d\u7a0b\u5e8f\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u8be5 exe \u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\u5982\u547d\u4ee4\u884c\u53c2\u6570 int main(int argc, char*argv[]) { } main.exe 123 xyz argv[0] [1] [2] data segment abc dw 1234,5678h data ends code segment assume cs:code, ds:data, ss:stk main: mov ax, data stk segment stack # \u5806\u6808\u6bb5\u53ea\u80fd\u5b9a\u4e49\u4e00\u4e2a db 200h dup('S') # \u6216\u5199\u6210 dw 100h dup('0') \u4e3a\u4e86\u5206\u914d\u7a7a\u95f4\u800c\u5199\u4e86\u4e00\u4e2a\u65e0\u540d\u6570\u7ec4 stk ends # \u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6 ss = stk, sp = 200h end main \u5f53\u6e90\u7a0b\u5e8f\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\u65f6\uff0css = \u9996\u6bb5\u7684\u6bb5\u5730\u5740 = 1000h\uff0c sp = 0 es: extra segment \u9644\u52a0\u6bb5 4.20 OF DF IF TF SF ZF AF PF CF CF: \u8fdb\u4f4d\u6807\u5fd7(carry flag) mov ah, 0FFh add ah, 1 # ah = 0, CF = 1, \u4ea7\u751f\u4e86\u8fdb\u4f4d add ah, 2 # ah = 2, CF = 0 sub ah, 3 # ah = 0FFh, CF = 1, \u4ea7\u751f\u4e86\u9519\u4f4d \u79fb\u4f4d\u6307\u4ee4\u4e5f\u4f1a\u5f71\u54cd CF \u7684\u503c\uff0c\u6700\u540e\u79fb\u51fa\u53bb\u7684\u90a3\u4e00\u4f4d\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5230 CF \u4e2d mov ah, 10110110B shr ah, 2 # \u8be5\u8bed\u6cd5\u8981\u6c42\u6e90\u4ee3\u7801\u6700\u524d\u9762\u52a0 .386\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6bb5\u5b9a\u4e49\u65f6 segment \u540e\u8ddf use16 mov cl, 2 shr ah, cl # \u53f3\u79fb 2 \u4f4d\uff0cCF = 1 \u4e0e CF \u76f8\u5173\u7684\u4e24\u6761\u8df3\u8f6c\u6307\u4ee4\uff1a jc\uff1a\u6709\u8fdb\u4f4d\u5219\u8df3\uff1bjnc\uff1a\u65e0\u8fdb\u4f4d\u5219\u8df3 adc\uff1a\u5e26\u8fdb\u4f4d\u52a0\uff1bclc: CF = 0; stc: CF = 1 ZF: \u96f6\u6807\u5fd7(zero flag) sub ax, ax # ax = 0, ZF = 1 add ax, 1 # ax = 1, ZF = 0 add ax, 0FFh # ax = 0, ZF = 1, CF = 1 jz is_zero # \u4f1a\u8fdb\u884c\u8df3\u8f6c\uff0c\u56e0\u4e3a\u5f53\u524d ZF == 1 \u4e0e jz \u76f8\u53cd\u7684\u6307\u4ee4\u662f jnz\uff0cjnz \u662f\u6839\u636e ZF == 0 \u4f5c\u51fa\u8df3\u8f6c jz \\equiv je; jnz \\equiv jne cmp ax, ax # cmp \u6307\u4ee4\u5185\u90e8\u505a\u4e86\u51cf\u6cd5\uff0c\u4f1a\u5f71\u54cd ZF \u7684\u72b6\u6001 jz/je is_equal \u4f1a\u8df3\u8f6c\u5230 is_equal int ax = 0x1234, bx = 0x1234, cx; cx = 1; if (ax != bx) cx = 0; # \u6ce8\u610f mov \u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d mov ax, 1234h mov bx, 1234h sub ax, bx # ZF = 1 mov bx = 1 # \u6b64 mov \u4e0d\u5f71\u54cd sub \u6307\u4ee4\u4ea7\u751f\u7684 ZF \u72b6\u6001 jz is_zero mov bx = 0 is_zero: SF: \u7b26\u53f7\u6807\u5fd7(sign flag)\uff0c\u5176\u5b9e\u5c31\u662f\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d mov ah, 7Fh add ah, 1 # ah = 80h = 1 000 0000B, SF = 1 sub ah, 1 # ah = 7Fh = 0111 1111B, SF = 0 jns positive # \u4f1a\u53d1\u751f\u8df3\u8f6c\uff0c\u56e0\u4e3a SF == 0 \u4e0e jns \u76f8\u53cd\u7684\u6307\u4ee4\u4e3a js\uff0cjs \u662f\u6839\u636e SF == 1 \u4f5c\u51fa\u8df3\u8f6c OF:\u6ea2\u51fa\u6807\u5fd7(overflow flag) mov ah, 7Fh add ah, 1 # ah = 80h, OF = 1, ZF = 0, CF = 0, SF = 1 mov ah, 80h add ah, 0FFh # ah = 7Fh, OF = 1, ZF = 0, CF = 1, SF = 0 mov ah, 80h sub ah, 1 # ah = 7Fh, OF = 1, ZF = 0, CF =0, SF = 0 OF \u4e5f\u6709\u4e24\u6761\u76f8\u5173\u7684\u6307\u4ee4\uff1ajo, jno \u6b63\u8d1f\u76f8\u52a0\u6c38\u4e0d\u6ea2\u51fa \u5de6\u79fb\u4e5f\u4f1a\u9020\u6210\u6ea2\u51fa mov ah, 81h # ah = 1000 0001B shl ah, 1 # ah = 0000 0010B, OF = 1, CF = 1 \u5de6\u79fb\u5bfc\u81f4\u7684\u6ea2\u51fa\u53ea\u8003\u8651\u79fb\u52a8 1 \u4f4d\uff0c\u53d6\u79fb\u4f4d\u540e\u7684\u6570\u7684\u6700\u9ad8\u4f4d\uff08\u5373\u539f\u6570\u636e\u7684\u6b21\u9ad8\u4f4d\uff09\u548c CF \uff08\u5373\u539f\u6570\u636e\u7684\u6700\u9ad8\u4f4d\u8fdb\u884c\uff09\u5f02\u6216\u8fd0\u7b97\u5f97\u5230 OF PF (Parity flag)\u5947\u5076\u6807\u5fd7 mov ah, 4 add ah, 1 # ah = 0000 0101B PF = 1 \u8868\u793a\u6709\u5076\u6570\u4e2a 1 mov ax, 0101h add ax, 0004h # ax = 0105h = 0000 0001 0000 0101B PF = 1; PF \u53ea\u7edf\u8ba1\u4f4e\u516b\u4f4d\u4e2d 1 \u7684\u4e2a\u6570 PF \u6709\u4e24\u6761\u76f8\u5173\u6307\u4ee4\uff1ajp (PF == 1 \u5219\u8df3)\uff1bjnp (PF == 0 \u5219\u8df3) \u5176\u4e2d jp \u4e5f\u53ef\u4ee5\u5199\u4f5c jpe (jump if parity even), jnp \u4e5f\u53ef\u4ee5\u5199\u4f5c jpo (jump if parity odd) \u5047\u5b9a\u8981\u53d1\u9001\u5b57\u7b26 'C' = 0 100 0011 B\uff0c\u73b0\u5047\u5b9a\u4f4e 7 \u4f4d\u4e3a\u6570\u636e\u4f4d\uff0c\u6700\u9ad8\u4f4d\u4e3a\u6821\u9a8c\u4f4d\uff0c\u90a3\u4e48\u6821\u9a8c\u4f4d\u7684\u8ba1\u7b97\u65b9\u6cd5\u6709 2 \u79cd\uff1a 1. \u5947\u6821\u9a8c\uff1a\u6570\u636e\u4f4d + \u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1 \u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5947\u6570\uff1b 2. \u5076\u6821\u9a8c\uff1a\u6570\u636e\u4f4d + \u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1 \u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570\u3002 \u73b0\u91c7\u7528\u5076\u6821\u9a8c\u6765\u53d1\u9001 'C' \uff0c\u90a3\u4e48\u6821\u9a8c\u4f4d\u5fc5\u987b\u662f 1\uff0c\u5373\u5b9e\u9645\u53d1\u9001\u7684 8 \u4f4d\u4e8c\u8fdb\u5236\u503c\u4e3a 1 100 0011\uff0c\u5bf9\u65b9\u63a5\u53d7\u8fd9 8 \u4f4d\u503c\u5e76\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668 al \u4e2d\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u6765\u9a8c\u8bc1 al \u4e2d\u7684\u503c\u662f\u5426\u6709\u9519\uff1a or al, al # \u6545\u610f\u4ea7\u751f\u8fd0\u7b97\uff0c\u8feb\u4f7f CPU \u7edf\u8ba1 al \u4e2d 1 \u7684\u4e2a\u6570 jnp error # if (PF == 0) goto error; good: error: or al, al jz iszero cmp al, 0 je iszero \u524d\u8005\u6548\u7387\u66f4\u9ad8 AF (Auxiliary Flag) \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7 \u4f4e 4 \u4f4d\u5411\u9ad8 4 \u4f4d\u4ea7\u751f\u8fdb\u4f4d\u6216\u501f\u4f4d\uff0c\u4f8b\u5982\uff1a mov ah, 1Fh # 0001 1111 add ah, 1 # ah = 20h, AF = 1 AF \u548c BCD (Binary Coded Decimal)\u7801\u6709\u5173 mov al, 29h #\u5206\u949f add al, 08 # \u8fc7\u4e86 8 \u5206\u949f\uff0c31h daa # decimal adjust for addition \u52a0\u6cd5\u7684\u5341\u8fdb\u5236\u8c03\u6574 # \u8fd9\u6761\u6307\u4ee4\u4f1a\u6839\u636e AF = 1 \u6216 (al & 0Fh) > 9\uff0c\u505a\u4ee5\u4e0b\u8fd0\u7b97: # al = al + 6 \u4f7f\u5f97 al = 37h \u800c\u5b9e\u9645\u4e0a 29 + 8 = 37 # \u82e5 CF = 1 \u6216 al & 0F0h > 90h\uff0c\u5219 al += 60h 5.11 \u8bbe\u6709\u4ee5\u4e0b\u5b9a\u4e49 x dd 3.14 y dq 5.67 \u73b0\u5728\u6267\u884c 1. fld x 2. fld y \u6d6e\u70b9\u72b6\u6001\u5bc4\u5b58\u5668\u7684\u7b2c 11 \u4f4d\u81f3\u7b2c 13 \u4f4d\u4fdd\u5b58\u4e86\u5f53\u524d\u6307\u9488\u5904\u7684\u7269\u7406\u7f16\u53f7 \u9664\u6cd5\u6ea2\u51fa 5.17 \u4ee3\u7801\u590d\u5236\uff1a\u9700\u8981\u77e5\u9053\u4ee3\u7801\u5757\u7684\u8d77\u59cb\u5730\u5740\u548c\u4ee3\u7801\u5757\u7684\u957f\u5ea6 main: push cs pop ds push cs pop es cld mov ah, 2 mov dl, 'A' int 21h mov si, offset begin_flag mov di, 1000h mov cx, offset end_flag - offset begin_flag ; \u53ef\u8ba1\u7b97\u7684\u5e38\u6570 rep movsb mov cx, offset begin_flag - offset main mov di, offset main ; \u6bc1\u53bb\u4e4b\u524d\u8c03\u7528\u8fc7\u7684\u4ee3\u7801 mov bx, 1000h jmp bx begin_flag: jmp next ;\u56e0\u4e3a\u662f\u6807\u53f7\u800c\u4e0d\u6562\u5192\u9669\uff0c\u6545\u7559\u4e0b\u4e86 3 \u4e2a\u5b57\u8282\uff0c ;\u8fdb\u4e00\u6b65\u626b\u63cf\u53d1\u73b0 next \u5c31\u5728\u4e0b\u9762\uff0c\u4f46\u4ecd\u7559\u4e0b\u4e86 nop next: mov al, 0 rep stosb","title":"ASM"},{"location":"ASM/#_1","text":"","title":"\u6c47\u7f16\u8bed\u8a00"},{"location":"ASM/#39","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u4e09\u4e2a push+ \u4e00\u4e2a call \u8868\u793a\u7a0b\u5e8f\u5728\u8c03\u7528 main \u51fd\u6570\uff0c\u5176\u4e4b\u524d\u7684\u4ee3\u7801\u4e3a C \u8bed\u8a00\u7684\u521d\u59cb\u5316\u4ee3\u7801. OD \u4e2d F2 \u4e3a\u8bbe\u7f6e\u65ad\u70b9\uff0c F7 \u4e3a\u8ddf\u8e2a\u8fdb\u5165. \u6570\u636e\u7a97\u4e2d Ctrl+G \u53ef\u4ee5\u8ddf\u8e2a\u53d8\u91cf. \u6709\u67d0\u4e9b\u5546\u7528\u7684\u5bf9 exe \u8fdb\u884c\u538b\u7f29\u7684\u8f6f\u4ef6\uff0c\u5982 Pecompact\uff0cVmProtect \u53ef\u4ee5\u628a exe \u538b\u7f29\u4e3a exe \uff0c\u538b\u7f29\u4ee5\u540e\u7684 exe \u4e5f\u80fd\u53cc\u51fb\u8fd0\u884c. \u8f6f\u4ef6\u4f5c\u8005\u8c03\u7528\u4ee5\u4e0b\u51fd\u6570 sn sn = rsa(mac\uff0c\u79c1\u94a5) \u8f6f\u4ef6\u68c0\u6d4b sn \u662f\u5426\u6b63\u786e rsa = (sn\uff0c\u516c\u94a5) == mac nop\u6307\u4ee4\u6307\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0cno operation\uff0c\u673a\u5668\u7801\u4e3a 0x90. alt+backspace \u53ef\u5c06\u6539\u574f\u7684\u6307\u4ee4\u6062\u590d\u539f\u6837. \u641c\u7d22\u65f6\u4f7f\u7528\u8f83\u957f\u7684\u4e32\u4ee5\u83b7\u53d6\u60f3\u8981\u7684\u7ed3\u679c. \u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5de5\u5177\u5982 010editor \u6216 QuickView \u90fd\u53ef\u4ee5\u5bf9 password.exe \u8fdb\u884c\u641c\u7d22\u5e76\u4fee\u6539. 010editor \u4e2d\u6309 Ctrl+F \u8f93\u5165\u8981\u67e5\u627e\u7684\u4e32(Type \u8981\u6ce8\u610f\u4fee\u6539\u4e3a hex bytes). QV \u6253\u5f00 password.exe\uff0c\u6309\u56de\u8f66\u952e\u53ef\u4ee5\u5728 ascii/hex/asm \u4e09\u79cd\u6a21\u5f0f\u4e2d\u5207\u6362\uff0casm \u6a21\u5f0f\u6709\u4e24\u79cd: 16\u4f4d/32\u4f4d\uff0c\u6309 F2 \u5207\u6362(\u67e5\u770b\u6700\u4e0b\u65b9\u72b6\u6001\u680f\u6216\u5bc4\u5b58\u5668\u5b57\u6bcd\u6570). F7 \u8fdb\u884c\u641c\u7d22\uff0ctab \u952e\u5728 ascii/hex \u95f4\u5207\u6362\uff0c\u5de6\u4e0a\u89d2\u7f16\u8f91\u5185\u6709\u7c98\u8d34. F3 \u53ef\u5c06\u6539\u574f\u7684\u5185\u5bb9\u53d8\u4e3a\u539f\u6837\uff0ctab \u952e\u53ef\u4ece\u5de6\u4fa7\u673a\u5668\u8bed\u8a00\u5207\u6362\u5230\u53f3\u4fa7\u6c47\u7f16\u6307\u4ee4\uff0c\u8f93\u5165\u6c47\u7f16\u8bed\u8a00\u8fdb\u884c\u4fee\u6539\uff0calt+F9 \u4fdd\u5b58\u4fee\u6539\uff0cF1 \u53ef\u83b7\u53d6\u5e2e\u52a9. md5 \u52a0\u5bc6\u7b97\u6cd5(\u4f46\u5df2\u7ecf\u88ab\u8bc1\u660e\u65e0\u6cd5\u9632\u6b62\u78b0\u649e). .data #\u7f16\u8bd1\u6307\u793a\u8bed\u53e5\uff0c\u8868\u793a\u53d8\u91cf\u3001\u6570\u7ec4\u5b9a\u4e49\u4ece\u6b64\u5904\u5f00\u59cb.\u6c47\u7f16\u8bed\u8a00\u4e2d\u5355\u5f15\u53f7\u53ca\u53cc\u5f15\u53f7\u65e0\u533a\u522b\uff0c\u4ed6\u4eec\u65e2\u53ef\u4ee5\u5f15\u4f4f\u5355\u4e2a\u5b57\u7b26\uff0c\u53c8\u53ef\u4ee5\u5f15\u4f4f\u591a\u4e2a\u5b57\u7b26; #\u5b57\u7b26\u4e32\u672b\u5c3e\u5e76\u6ca1\u6709\u9690\u542b\u7684'\\0';\u5b9a\u4e49\u6570\u7ec4\u548c\u5b9a\u4e49\u53d8\u91cf\u65e0\u533a\u522b. result db 100 dup(0) #dup:duplicate # == char result={0} format db \"%d\"\uff0c0 prompt db \"The result\"\uff0c0 .code #\u7f16\u8bd1\u6307\u793a\u8bed\u53e5\uff0c\u5e2e\u52a9\u7f16\u8bd1\u5668\u8bc6\u522b\u4ee3\u7801\u4ece\u6b64\u5904\u5f00\u59cb main: #\u6807\u53f7 mov eax\uff0c0 mov ebx\uff0c1 next: add eax\uff0cebx #eax = eax + ebx add ebx\uff0c1 cmp ebx\uff0c100 #cmp:compare jbe next #jbe:jump if below or equal invoke wsprintf\uff0coffset result\uff0coffset format\uff0ceax #wsprintf \u548c MessageboxA \u662f Windows \u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u51fd\u6570 offset \u4e3a\u53d6\u5730\u5740. # == wsprintf(&result[0]\uff0c&format[0]\uff0ceax); \u5c06 eax \u4e2d\u7684\u5185\u5bb9\u4ee5 char \u7c7b\u578b format \u6570\u7ec4\u7684\u683c\u5f0f\u8f93\u51fa\u5230 char \u7c7b\u578b result \u6570\u7ec4\u4e2d. # == wsprintf(result\uff0cformat\uff0ceax) result \u4e2d\u5c06\u5305\u542b\"5050\" \"%d\". invoke MessageBoxA\uff0c0\uff0coffset result\uff0coffset prompt\uff0c0 #\u79f0\u4e3a API (Application Program Interface). MessageboxA(0\uff0cformat\uff0cprompt\uff0c0) #\u6b63\u6587 \u6807\u9898 ret #return end main #\u6307\u5b9a\u7a0b\u5e8f\u7684\u8d77\u59cb\u6267\u884c\u70b9\u5373eip\u7684\u521d\u59cb\u503c\uff0cend \u540e\u9762\u7684\u6807\u53f7\u51b3\u5b9a\u4e86\u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6eip\u7684\u503c. .386 #\u8868\u793a\u4f1a\u7528\u523032\u4f4d\u7684\u5bc4\u5b58\u5668. code segment use16 #\u76f8\u5f53\u4e8e'{'\uff0cuse16\u8868\u793a\u4f7f\u752816\u4f4d\u7684\u5730\u5740. assume cs:code main: mov eax\uff0c0 mov ebx\uff0c1 next: add eax\uff0cebx add ebx\uff0c1 cmp ebx\uff0c100 jbe next code ends #\u76f8\u5f53\u4e8e'}' end main Win+R \u8f93\u5165 command \u6253\u5f00 DOS \u7ec8\u7aef\uff0c\u8fdb\u5165 D \u76d8\u4e2d\u7684 MASM \u76ee\u5f55\u4e2d\uff0cmasm name.asm \u751f\u6210 name.obj\uff0clink name.obj \u751f\u6210 name.exe. \u4f7f\u7528 td name.exe \u8fdb\u884c debug\uff0c\u6309 Ctrl+R/\u5728\u5bc4\u5b58\u5668\u754c\u9762\u5355\u51fb\u53f3\u952e\u5207\u636232\u4f4d/16\u4f4d\u7684\u5bc4\u5b58\u5668. cli \u662f\u4e00\u6761\u7279\u6743\u6307\u4ee4\uff0c\u542b\u4e49\u4e3a clear interrup\uff0c\u8868\u793a\u7981\u6b62\u786c\u4ef6\u4e2d\u65ad. Windows\u7684\u7528\u6237\u7a0b\u5e8f\u662f\u4e0d\u5141\u8bb8\u6267\u884c\u8be5\u6761\u6307\u4ee4\u7684. #\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u5e76\u5224\u65ad\u662f\u5426\u4e3a\u5927\u5199\u5b57\u6bcd(getchar&putchar) .386 code segment use16 assume cs:code main: mov ah\uff0c 1 int 21h #AL = getchar()\uff0cint 21h \u662f\u4e00\u4e2a\u4e2d\u65ad\u96c6\uff0cint:interrupt\uff0c\u6307\u8f6f\u4ef6\u4e2d\u65ad\uff0cah = 1 \u8868\u793a\u8c03\u7528\u8be5\u4e2d\u65ad\u96c6\u4e2d\u76841\u53f7\u5b50\u4e2d\u65ad. cmp al\uff0c 'A' jb not_upper #jb:jump if below cmp al\uff0c 'Z' ja not_upper #ja:jump if above is_upper: mov ah\uff0c 2 mov dl\uff0c 'U' int 21h #putchar(DL) jmp exit not_upper: mov ah\uff0c 2 mov dl\uff0c 'O' int 21h exit: move ah\uff0c 4Ch move al\uff0c 0 int 21h #exit(0) code ends end main","title":"3.9"},{"location":"ASM/#316","text":"data segment a db \"ABC\" s db \"Hello$World!\"\uff0c 0Dh\uff0c 0Ah \uff0c0 #\u51fd\u6570\u7ecf\u8fc7\u7f16\u8bd1\u540e\u53d8\u4e3a\u5176\u9996\u5730\u5740\uff0c\u6570\u7ec4\u7ecf\u8fc7\u7f16\u8bd1\u540e\u4e5f\u53d8\u4e3a\u5176\u9996\u5730\u5740.\u4e3a\u9632\u6b62\u4e0e\u5bc4\u5b58\u5668\u6df7\u6dc6\uff0c\u5b57\u6bcd\u5f00\u5934\u7684\u5341\u516d\u8fdb\u5236\u6570\u524d\u9700\u8981\u52a0\u4e0a0. # offset s \u79f0\u4e3a s \u7684\u504f\u79fb\u5730\u5740 = \u5176\u79bb data \u6bb5\u9996\u7684\u8ddd\u79bb = 3 # \u56de\u8f66 \u6362\u884c windows \u4e2d\u6362\u5230\u4e0b\u4e00\u884c\u884c\u9996\u9700\u8981\u56de\u8f66\u548c\u6362\u884c\u4e24\u4e2a\u64cd. # \"\\r\"\"\\n\" \u56de\u8f66:\u5149\u6807\u56de\u5230\u884c\u9996;\u6362\u884c:\u5149\u6807\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u540c\u4e00\u5217. data ends code segment assume cs:code\uff0cds:data main: mov ax\uff0cseg s # \u6216mov ax\uff0cdata;seg s:\u53d6\u6570\u7ec4 s \u7684\u6bb5\u5730\u5740.\u7f16\u8bd1\u65f6\u4f1a\u5c06 seg s \u7f16\u8bd1\u4e3a delta = (seg s - \u9996\u6bb5\u6bb5\u5730\u5740)\uff0c\u6b64\u5904\u4e3a0\uff0c\uff0c\u7f16\u8bd1\u540e\u5373 mov ax\uff0c0. # \u8fd0\u884c\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5373 dos \u4f1a\u5bf9 delta \u8fdb\u884c\u4fee\u6b63: delta += \u9996\u6bb5\u7684\u5b9e\u9645\u6bb5\u5730\u5740\uff0c\u6b64\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u91cd\u5b9a\u4f4d(relocating). # mov ax\uff0cseg s \u7f16\u8bd1\u540e\u7684\u673a\u5668\u8bed\u8a00\u4e3a B8 00 00\uff0c\u5047\u5b9a\u7a0b\u5e8f\u7684\u9996\u6bb5\u5730\u5740\u4e3a 1000h\uff0c\u5219\u7a0b\u5e8f\u8fd0\u884c\u65f6\u673a\u5668\u8bed\u8a00\u53d8\u4e3a B8 00 10. # \u673a\u5668\u80fd\u77e5\u9053\u6b64\u5904\u9700\u8981\u4fee\u6b63\u662f\u56e0\u4e3a\u7f16\u8bd1\u65f6\u751f\u6210\u4e86\u91cd\u5b9a\u5411\u8868\uff0c\u5bf9\u9700\u8981\u91cd\u5b9a\u5411\u7684\u4f4d\u7f6e\u8fdb\u884c\u4e86\u6807\u8bb0\uff0c\u6b64\u6807\u8bb0\u88ab\u5199\u5728\u6587\u4ef6\u5934\u4e2d. mov ds\uff0cax # ds:\u6570\u636e\u6bb5\u5bc4\u5b58\u5668\uff0c\u53ea\u7528\u6765\u5b58\u50a8\u6807\u53f7\u6216\u53d8\u91cf\u7684\u6bb5\u5730\u5740\uff0c\u4e0d\u80fd\u63a5\u53d7\u5e38\u6570\u8d4b\u503c\uff0c\u53ea\u63a5\u53d7\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668/\u53d8\u91cf\u8d4b\u503c\uff0c\u53e6\u5916\u8fd8\u6709 cs\uff0css\uff0ces \u8fd9\u4e09\u4e2a\u6bb5\u5bc4\u5b58\u5668. mov bx\uff0c0 next: # s[i] = *(s+i) mov dl\uff0cs[bx] # \u7f16\u8bd1\u540e\u53d8\u6210 mov dl\uff0cds:[bx + 3];ds \u6307\u8be5\u6570\u7ec4\u5143\u7d20\u7684\u6bb5\u5730\u5740(segment address)\uff0c\u8be5\u6570\u7ec4\u5143\u7d20\u7684\u504f\u79fb\u5730\u5740\u4e3a 3\uff0c\u8be5\u5143\u7d20\u7684\u5b8c\u6574\u5730\u5740\u4e3a ds:bx + 3 cmp dl\uff0c0 je exit # je:jump if equal move ah\uff0c2 int 21h add bx\uff0c1 jmp next exit: # cs = seg exit = code \u7684\u6bb5\u5730\u5740. mov ah\uff0c4Ch int 21h code ends end main \u540c\u4e00\u4e2a\u6bb5\u5185\u6bcf\u4e00\u4e2a\u53d8\u91cf\u7684\u6bb5\u5730\u5740\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u6bb5\u9996\u5730\u5740\u53d6\u524d\u56db\u4f4d\uff0c\u4e2a\u4f4d\u5fc5\u987b\u4e3a0\uff0c\u504f\u79fb\u5730\u5740\u7684\u53d8\u5316\u8303\u56f4\u4e3a 0000h:FFFFh.\u6bb5\u7684\u6700\u5927\u957f\u5ea6\u4e3a 10000h \u5b57\u8282\u5373 64k;\u6bb5\u548c\u6bb5\u53ef\u4ee5\u91cd\u53e0. |\u7269\u7406\u5730\u5740|\u76f8\u5bf9\u5730\u5740| |:----:|:----:| |12340h|00h| |12341h|01h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |12350h|33h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |12398h|33h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |12398h|55h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |2233Fh|77h| |\u2026\u2026\u2026\u2026|\u2026\u2026\u2026\u2026| |2234Fh|99h| 16 \u4f4d\u7684 CPU \u6307\u5176\u6240\u6709\u5bc4\u5b58\u5668\u90fd\u662f 16 \u4f4d\u7684\u5bbd\u5ea6;ax\uff0cbx\uff0ccx\uff0cdx\uff0csi\uff0cdi\uff0cbp\uff0csp\uff0ccs\uff0cds\uff0ces\uff0css\uff0cip\uff0cFL. bx\uff0cbp\uff0csi\uff0cdi \u8868\u793a\u504f\u79fb\u5730\u5740\uff0ccs \u7ba1\u7406 code \u6bb5\uff0cds \u7ba1\u7406 data \u6bb5\uff0c\u4e24\u8005\u5fc5\u987b\u88ab\u8d4b\u503c. \u6807\u53f7\u6700\u7ec8\u4f1a\u8f6c\u5316\u4e3a\u5176\u504f\u79fb\u5730\u5740. ip \u662f \u6307\u4ee4\u6307\u9488(instruction pointer)\uff0c\u7528\u6765\u4fdd\u5b58\u5c06\u8981\u6267\u884c\u7684\u6307\u4ee4\u7684\u504f\u79fb\u5730\u5740\uff0c\u800c cs \u5219\u662f\u7528\u6765\u4fdd\u5b58\u5c06\u8981\u6267\u884c\u7684\u6307\u4ee4\u7684\u6bb5\u5730\u5740\uff0c\u4e8e\u662f cs:ip \u7528\u6765\u6307\u5411\u8981\u6267\u884c\u7684\u90a3\u6761\u6307\u4ee4. FL \u662f\u6807\u5fd7(flag)\u5bc4\u5b58\u5668\uff0c\u5b83\u91cc\u9762\u768416\u4e2a\u4f4d\u5206\u522b\u4ee3\u8868\u4e0d\u540c\u7684\u610f\u4e49\uff0c\u5176\u4e2d\u6709\u4e9b bit \u8868\u793a\u6307\u4ee4\u6267\u884c\u4ee5\u540e\u7684\u72b6\u6001\uff0c\u6709\u4e9b\u5219\u53ef\u4ee5\u63a7\u5236 CPU \u7684\u884c\u4e3a. \u5982 FL \u7684\u7b2c0\u4f4d\u79f0\u4e3a CF \u4f4d\uff0c\u5176\u7528\u6765\u5b58\u50a8\u5f53\u524d\u6307\u4ee4\u7684\u8fdb\u4f4d. mov ax\uff0c0FFFFh add ax\uff0c1 ; AX = 0 \uff0c CF = 1 jnc no_carry_flag ;jnc:jump if not carry flag jc has_carry_flag ;jc:jump if carry flag has_carry_flag: date \u6bb5\u548c code \u6bb5\u662f\u8fde\u7eed\u7684. ds:[20] = cs:[0] 16\u4f4d\u7684 CPU \u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f(real mode)\u4e0b\uff0c\u7528\u6237\u4ee3\u7801\u62e5\u6709\u548c\u64cd\u4f5c\u7cfb\u7edf\u4e00\u6837\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u6307\u4ee4\uff0c\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u5185\u5b58.32\u4f4d\u7684 CPU \u9664\u4e86\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u5728\u5b9e\u6a21\u5f0f\u4e0b\u5916\uff0c\u8fd8\u53ef\u4ee5\u8fd0\u884c\u5728\u4fdd\u62a4\u6a21\u5f0f(protected mode)\u4e0b.\u5728\u4fdd\u62a4\u6a21\u5f0f\u4e0b\uff0c\u7528\u6237\u4ee3\u7801\u7684\u6743\u9650\u4f4e\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u6743\u9650\uff0c\u5e76\u4e0d\u80fd\u6267\u884c\u4efb\u4f55\u6307\u4ee4\uff0c\u4e0d\u80fd\u8d8a\u6743\u8bbf\u95ee\u64cd\u4f5c\u7cfb\u7edf\u53ca\u5176\u4ed6\u8fdb\u7a0b\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4. 32\u4f4d\u7684 CPU \u4e2d\uff0ccs\uff0cds\uff0ces\uff0css \u4ecd\u65e7\u4e3a16\u4f4d\u7684\u5bbd\u5ea6\uff0c\u5176\u4ed6\u5185\u5b58\u5668\u90fd\u53d8\u6210\u4e8632\u4f4d\uff0c\u5982 eax\uff0cebx\uff0cecx\uff0cedx\uff0cesi\uff0cedi\uff0cesp\uff0cebp\uff0ceip\uff0cEFL. 32\u4f4d\u7684 CPU \u6700\u591a\u53ef\u4ee5\u8bbf\u95ee 4G ( \\(2^{32}\\) )\u5b57\u8282\u5185\u5b58\u7a7a\u95f4. \u5b9e\u6a21\u5f0f\u548c\u4fdd\u62a4\u6a21\u5f0f\u4e0b\u7684\u6bb5\u610f\u4e49\u4e0d\u540c\uff0c\u4f8b\u5982\u5f53 ds = 8\uff0cesi = 45678h \u65f6\uff0c\u6c42 ds:esi \u7684\u7269\u7406\u5730\u5740. gdt \u79f0\u4e3a\u5168\u5c40\u63cf\u8ff0\u7b26\u8868(global descriptor table)\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f8\u4e2a\u5b57\u8282. \u6709\u4e00\u4e2a\u5bc4\u5b58\u5668\u53eb gdtr \u4f1a\u88ab\u8d4b\u503c\u4e3a gdt \u8868\u7684\u9996\u5730\u5740. \u8bbe gdt \u8868\u7684\u9996\u5730\u5740\u4e3a t: t + 0 -> gdt[0] t + 8 -> gdt[1] t + 10h -> gdt[2] t + 18h -> gdt[3] \u628a ds \u548c t \u76f8\u52a0\u6307\u5411 gdt[1]\uff0c\u5047\u5b9a gdt[1] \u76848\u5b57\u8282\u5982\u4e0b\u6240\u793a: 00 01 02 03 04 05 06 07 ->\u4e0b\u6807 FF, FF, 00, 00, 10, 93, 0F, 00 ->\u503c \u6bb5\u9996\u5730\u5740\u53d6\u7b2c2\uff0c3\uff0c4\uff0c7\u5b57\u8282\uff0c\u6b64\u5904\u4e3a00100000h\uff0c\u4e8e\u662f ds:45678h\u5bf9\u5e94\u7684\u7269\u7406\u5730\u5740\u4e3a: 00100000h + 45678h = 00145678h. \u7b2c0\uff0c1\u5b57\u8282\u4ee5\u53ca\u7b2c6\u5b57\u8282\u7684\u4f4e\u4f4d\u7528\u6765\u5b9a\u4e49\u6bb5\u5185\u7684\u6700\u5927\u504f\u79fb\u5730\u5740\uff0c\u6b64\u5904\u4e3a FFFFFh;\u7b2c6\u5b57\u8282\u7684\u9ad8\u4f4d\u8868. \u7b2c5\u5b57\u8282 93h \u7528\u6765\u89c4\u5b9a\u8fd9\u662f\u4e00\u4e2a\u6570\u636e\u6bb5\uff0c\u4e14\u53ef\u8bfb\u53ef\u5199\uff0c\u89c4\u5b9a\u8be5\u6bb5\u7684\u8bbf\u95ee\u6743\u9650\u662f ring 0. 93h = 1 00 1 0011\uff0c\u6743\u9650\u7531\u659c\u4f53\u90e8\u5206\u51b3\u5b9a.","title":"3.16"},{"location":"ASM/#323","text":"db, dw, dd, dq, dt 08, 16, 32, 64, 80 - db: char\uff0cb: byte; - dw: short int\uff0cw: word; - dd: long int or float\uff0cdouble words; - dq: __int64 or long long or double\uff0cq: quadruple words; - dt: long double\uff0c\"%Lf\". IEEE754 \u6807\u51c6\u4e2d\u5355\u7cbe\u5ea6\u5c0f\u6570(\u5373 float \u7c7b\u578b\u7684\u8868\u793a): 0 1000010 1 1111110 11000000 00000000 1\u4f4d\u7b26\u53f7\u4f4d\uff0c8\u4f4d\u6307\u6570\u4f4d\uff0c23\u4f4d\u5c3e\u6570.\u504f\u7f6e\u6307\u6570:a = (8\u4f4d\u65e0\u7b26\u53f7\u6570-127)\uff0c\u6700\u7ec8 *2^a\uff0c\u5728\u4e8c\u8fdb\u5236\u4e0a\u8868\u73b0\u4e3a\u5c3e\u6570\u5c0f\u6570\u70b9\u7684\u79fb\u52a8. \u9996\u5148\u8865\u4e00\u4e2a1\u548c\u5c0f\u6570\u70b9.1.11111101100000000000000->1111111.01100000000000000 \u7b97\u672f\u8fd0\u7b97: add\uff0csub \u52a0\u51cf;mul\uff0cdiv \u65e0\u7b26\u53f7\u6570\u4e58\u9664;imul\uff0cidiv \u6709\u7b26\u53f7\u6570\u4e58\u9664 mov ax\uff0c0FFFFh mov bx\uff0c0FFFFh mul bx # dx:ax = ax * bx = 0FFFF 0001h = 4294836225\uff0c\u5176\u4e2d dx = 0FFFFh\uff0cax = 0001h\uff0c\u8fd9\u91cc\u7684\u5192\u53f7\u8868\u793a\u9ad816\u4f4d\u548c\u4f4e16\u4f4d\u7684\u62fc\u63a5.16\u4f4d\u6570\u7684\u4e58\u6cd5\u9ed8\u8ba4\u88ab\u4e58\u6570\u4e3aax\uff0c\u4e14\u5b58\u653e\u4f4d\u7f6e\u9ed8\u8ba4\u4e3a dx:ax. mov ax\uff0c0FFFFh mov bx\uff0c0FFFFh imul bx # dx:ax = ax*bx = 0000 0001h \u6c47\u7f16\u8bed\u8a00\u7684\u53d8\u91cf\u5b9a\u4e49\u4e0d\u533a\u5206\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570. \u903b\u8f91\u8fd0\u7b97:and(&)\uff0cor(|)\uff0cxor(^)\uff0cnot(~)\uff0cshl(<<)\uff0cshr(>>)\uff0c rol(_rotl())\uff0cror(_rotr()) shl:shift left; shr:shift right; rol:rotate left; ror:rotate right mov ah\uff0c10110110B # rol\u524d 1011 0110 rol ah\uff0c1 # rol\u540e 0110 1101\uff0cCF = 1 .386 # \u63a5\u4e0b\u6765\u8981\u7528\u523032\u4f4d\u5bc4\u5b58\u5668\uff0c\u4e14\u504f\u79fb\u5730\u5740\u9ed8\u8ba4\u4e3a32\u4f4d. data segment use16 a dd 56789ABCh data ends code segment use16 assume cs:code ds:data main: mov ax\uff0cdata # mov ax\uff0cseg a mov ds\uff0cax # \u4fdd\u8bc1 ds \u6307\u5411 data \u6bb5. mov eax\uff0ca # \u56e0\u4e3a a \u9700\u8981\u7528\u5230\u6bb5\u5730\u5740. mov cx\uff0c8 again: rol eax\uff0c4 # eax = 6789ABC5h mov edx\uff0ceax and edx\uff0c0Fh # edx = 5 cmp edx\uff0c10 jae is_alpha add dl\uff0c'0' jmp out_put is_alpha: sub dl\uff0c10 add dl\uff0c'A' output: push eax mov ah\uff0c2 int 21h pop eax dec cx # dec:\u81ea\u51cf;inc:\u81ea\u589e code ends end main","title":"3.23"},{"location":"ASM/#330","text":"1.\u76f4\u63a5\u5bfb\u5740 2.\u95f4\u63a5\u5bfb\u5740(\u7528\u5bc4\u5b58\u5668\uff0c\u5bc4\u5b58\u5668 + \u5e38\u6570\u6765\u8868\u793a\u53d8\u91cf\u7684\u504f\u79fb\u5730\u5740) cs\uff0cds\uff0ces\uff0css \u7528\u6765\u8868\u793a\u6bb5\u5730\u5740;sp\uff0cbp\uff0csi\uff0cdi \u7528\u6765\u8868\u793a\u504f\u79fb\u5730\u5740. sp \u548c ss \u7ed3\u5408\u5728\u4e00\u8d77\u6784\u6210 ss:sp \u6307\u5411\u5806\u6808\u7684\u9876\u7aef. \u5bc4\u5b58\u5668\u76f8\u52a0\u65f6\u53ea\u80fd\u4ee5 b \u5f00\u5934\u548c i \u7ed3\u5c3e\u7684\u5bc4\u5b58\u5668\u76f8\u52a0. a. [bx]\uff0c[bp]\uff0c[si]\uff0c[di]; b. [ax+2]\uff0c[bp-1]\uff0c[si+3]\uff0c[di-4]; c. [bx+si];[bx+di]\uff0c[bp+si]\uff0c[bp+di]; d. [bx+si+2]\uff0c[bx+di-2]\uff0c[bp+si+6]\uff0c[bp+di-6]. \u6c47\u7f16\u8bed\u8a00\u7684\u591a\u6570\u6307\u4ee4\u8981\u6c42\u4e24\u4e2a\u64cd\u4f5c\u6570\u7b49\u5bbd\uff0c\u53ea\u8981\u6709\u4e00\u65b9\u7684\u5bbd\u5ea6\u5df2\u77e5\uff0c\u53e6\u4e00\u65b9\u7684\u5bbd\u5ea6\u5fc5\u987b\u4e0e\u5176\u4e00\u81f4.\u82e5\u4e24\u8005\u5747\u4e0d\u660e\u786e\uff0c\u5219\u9700\u7ed9\u4e00\u65b9\u52a0\u4e0a\u5bbd\u5ea6\u7684\u9650\u5236.\u5e38\u6570\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u6ca1\u6709\u660e\u786e\u7684\u5bbd\u5ea6.\u5982: mov ds:[di]\uff0c0 #\u4e24\u8005\u5bbd\u5ea6\u5747\u4e0d\u660e\u786e\uff0c\u7f16\u8bd1\u4f1a\u62a5\u9519. \u6b63\u786e\u7684\u5199\u6cd5\u4e3a: mov byte ptr ds:[di]\uff0c0 \u7ffb\u8bd1\u4e3a C \u8bed\u8a00: *(char *)(ds:di) = 0; #ptr \u662f pointer \u7684\u7f29\u5199. mov word ptr ds:[di]\uff0c0 \u7ffb\u8bd1\u4e3a C \u8bed\u8a00: *(short int *)(ds:di) = 0 mov dword ptr ds:[di]\uff0c0 \u7ffb\u8bd1\u4e3a C \u8bed\u8a00: *(long int *)(ds:di) = 0 \u6216: mov al\uff0c0 mov ds:[di]\uff0cal \u6ce8\u610f\u5bbd\u5ea6\u4fee\u9970\u4e0d\u80fd\u7528\u4e8e\u5e38\u6570\uff0c\u53ea\u80fd\u4f5c\u7528\u4e8e\u53d8\u91cf. \u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528\u67d0\u4e2a\u53d8\u91cf\u65f6\uff0c \u8be5\u53d8\u91cf\u7684\u6bb5\u5730\u5740\u5fc5\u987b\u7528\u6bb5\u5bc4\u5b58\u5668\u8868\u793a\uff0c \u4e0d\u80fd\u7528\u5e38\u6570\u8868\u793a; \u504f\u79fb\u5730\u5740\u65e2\u53ef\u4ee5\u7528\u76f4\u63a5\u5bfb\u5740\u5373\u5e38\u6570\uff0c \u53c8\u53ef\u4ee5\u7528\u95f4\u63a5\u5bfb\u5740\u5373[]\u4e2d\u542b\u6709\u5bc4\u5b58\u5668\u8868\u793a. struct st { char name[8]; short int score; }a[10]; # \u5047\u5b9a ds = seg a\uff0c bx = offset a. \u73b0\u5728\u8981\u5c06 a[2].score \u8d4b\u503c\u7ed9 ax. mov si\uff0c20 mov ax\uff0cds:[bx+si+8] # ax = a[2].score # bx \u662f\u6570\u7ec4\u9996\u5143\u7d20\u7684\u5730\u5740\uff0c si \u662f a[0] \u5230 a[2] \u7684\u8ddd\u79bb\uff0c 8\u662f name \u6570\u7ec4\u7684\u957f\u5ea6. \u5728\u539f\u7a0b\u5e8f\u4e2d\u5f15\u7528\u53d8\u91cf: data segment abc db 1\uff0c2\uff0c3\uff0c4 xyz dw 789Ah\uff0c0BCDEh\uff0c9876h asd dd 12345678h\uff0c56789ABCh data ends code segment assume cs:code\uff0cds:data main: mov ax\uff0cdata mov ds\uff0cax # \u5f62\u5f0f 1 mov ah\uff0cabc[1] mov ah\uff0c[abc+1] # \u5f62\u5f0f 2 mov bx\uff0coffset abc mov ah\uff0c[bx+1] # \u5f62\u5f0f 3 mov bx\uff0c1 mov ah\uff0cabc[bx] mov ah\uff0c[abc+bx] # \u5f62\u5f0f 4 mov bx\uff0coffset abc mov si\uff0c1 mov ah\uff0c[bx+si] code ends end main assume \u7684\u4f5c\u7528\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u5f15\u7528\u67d0\u4e2a\u53d8\u91cf\u6216\u6807\u53f7\u7684\u6bb5\u5730\u5740\u66ff\u6362\u6210\u5bf9\u5e94\u7684\u6bb5\u5bc4\u5b58\u5668\uff0c \u4f46\u4ed6\u5e76\u4e0d\u4f1a\u5bf9\u6bb5\u5bc4\u5b58\u5668\u8fdb\u884c\u8d4b\u503c. assume cs:code\uff0cds:data \u662f\u7f16\u8bd1\u6307\u793a\u8bed\u53e5(directive)\uff0c\u7f16\u8bd1\u540e\u4e0d\u4f1a\u4ea7\u751f\u673a\u5668\u7801\uff0c\u4f46\u4f1a\u6d88\u5931. data segment a db 'a' end datas code1 segment assume cs:code1\uff0cds:data main: je far_away next: mov dl\uff0c[a] mov al\uff0c2 int 21h code1 ends je next code2 segment assume cs:code2 je next code2 ends end main \u6bb5\u5bc4\u5b58\u5668\u4f18\u5148\u7ea7: ds>ss>es>cs. \u5f53\u540c\u4e00\u4e2a\u6bb5\u540d\u548c\u591a\u4e2a\u6bb5\u5bc4\u5b58\u5668\u5efa\u7acb\u4e86\u5173\u8054\u65f6\uff0c\u9075\u5faa\u5982\u4e0a\u7684\u4f18\u5148\u7ea7\u987a\u5e8f. Bochs \u865a\u62df\u673a\u53ca\u5176\u5185\u7f6e\u8c03\u8bd5\u5668 Soft-ICE \u4ecb\u7ecd: Bochs \u4e0b\u8f7d\u89e3\u538b\u7f29\u540e\uff0cbochs\\bochsdbg.exe \u53cc\u51fb -> Load -> dos.bxrc -> Start -> Continue (\u89e3\u91ca\u6267\u884c) \u5e38\u89c4\u7684\u65ad\u70b9\u5373\u8f6f\u4ef6\u65ad\u70b9(software breakpoint)\u4f1a\u628a\u8bbe\u4e86\u65ad\u70b9\u7684\u6307\u4ee4\u7684\u9996\u5b57\u8282\u6539\u6210 0CCh \u8fd9\u4e2a\u673a\u5668\u7801\uff0c\u8be5\u673a\u5668\u7801\u5bf9\u5e94\u7684\u6307\u4ee4\u662f int 3.\u5f53\u8c03\u8bd5\u5668\u6267\u884c\u5230 int 3 \u65f6\u4f1a\u81ea\u52a8\u65ad\u4f4f\uff0c\u5373 int 3 \u76f8\u5f53\u4e8e\u4e00\u4e2a\u65ad\u70b9. TD \u53ea\u652f\u6301\u8f6f\u4ef6\u65ad\u70b9\uff0c\u4e0d\u652f\u6301\u786c\u4ef6\u65ad\u70b9.Soft-ICE \u65e2\u652f\u6301\u8f6f\u4ef6\u65ad\u70b9\uff0c\u53c8\u652f\u6301\u786c\u4ef6\u65ad\u70b9(hardware breakpoint).\u5176\u4e2d\u786c\u4ef6\u65ad\u70b9\u6709 3 \u79cd\u7c7b\u578b: bpmb \u5730\u5740 r:\u5f53\u5730\u5740\u5904\u7684\u53d8\u91cf\u503c\u88ab\u8bfb\u53d6\u65f6\u65ad\u4f4f; bpmb \u5730\u5740 w:\u5f53\u5730\u5740\u5904\u7684\u53d8\u91cf\u503c\u88ab\u5199\u5165\u65f6\u65ad\u4f4f; bpmb \u5730\u5740 x:\u5f53\u5730\u5740\u5904\u7684\u6307\u4ee4\u88ab\u6267\u884c\u65f6\u65ad\u4f4f. 80386 \u4ee5\u4e0a\u7684 CPU \u5728\u786c\u4ef6\u4e0a\u652f\u6301\u786c\u4ef6\u65ad\u70b9\u529f\u80fd\uff0c\u5f53\u8c03\u8bd5\u5668\u8bbe\u7f6e\u786c\u4ef6\u65ad\u70b9\uff0c\u5b83\u4f1a\u628a\u65ad\u70b9\u5730\u5740\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668 dr0\uff0cdr1\uff0cdr2\uff0cdr3\u4e2d\uff0c\u518d\u628a\u65ad\u70b9\u7684\u6761\u4ef6\u4fdd\u5b58\u5230 dr6 \u53ca dr7 \u4e2d.\u786c\u4ef6\u65ad\u70b9\u7684\u4e2a\u6570\u6700\u591a 4 \u4e2a.\u786c\u4ef6\u65ad\u70b9\u4e0d\u4f1a\u4fee\u6539\u53d8\u91cf\u6216\u6307\u4ee4\u7684\u5185\u5bb9. # \u68c0\u6d4b\u8bbe\u7f6e\u8f6f\u4ef6\u65ad\u70b9\u4f1a\u5c06\u6307\u4ee4\u9996\u5b57\u8282\u6539\u4e3a 0CCh. code segment assume cs:code main: cx\uff0c10 next: mov ah\uff0c2 # \u6b64\u5904\u8bbe\u4e00\u4e2a\u8f6f\u4ef6\u65ad\u70b9 mov dl\uff0c'A' int 21h mov al\uff0cbyte ptr [next] # \u7f16\u8bd1\u65f6\u4f1a\u8f6c\u4e3a mov al\uff0cbyte ptr code:[next]\uff0c # \u518d\u6839\u636e assume \u8f6c\u4e3a mov al\uff0cbyte ptr cs:[next] cmp al\uff0c0CCh je done sub cx\uff0c1 cmp cx\uff0c0 jnz next done: mov al\uff0c4Ch int 21h code ends end main","title":"3.30"},{"location":"ASM/#46","text":"\u7528 winimage \u6253\u5f00 dos.img \u8fd9\u4e2a\u786c\u76d8\u955c\u50cf\u53ef\u4ee5\u5b9e\u73b0\u865a\u62df\u673a\u5185\u5916\u6587\u4ef6\u7684\u4ea4\u6362. \u627e\u5230 bochs\\dos.img \u53cc\u51fb bochs\\bochsdbg.exe \u53cc\u51fb\u542f\u52a8 bochs Load -> dos.bxrc -> Start \u590d\u5236 addr.c \u5230 bochs\\tc \u4e2d; cd\\tc tc: \u6309 Alt + F \u9009\u62e9\u83dc\u5355 file -> load -> addr.c \u6309 Alt + C \u9009\u62e9\u83dc\u5355 compile -> build all \u6309 Alt + F \u9009\u62e9\u83dc\u5355 file -> quit td addr \u7528\u6c47\u7f16\u8bed\u8a00\u63a7\u5236\u6587\u672c\u65b9\u5f0f\u4e0b\u6574\u4e2a\u5c4f\u5e55\u7684\u8f93\u51fa\uff1a (x,y) \u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740 = (y * 80 + x) * 2\uff0c\u663e\u5361\u6bb5\u5730\u5740\u56fa\u5b9a\u4e3a 0B800h. 0000:0000 ~ 0000:FFFF 1000:0000 ~ 1000:FFFF \u2026\u2026 9000:0000 ~ 9000:FFFF # dos \u53ca\u7528\u6237\u7a0b\u5e8f\u5360\u7528\u8fd9\u5757\u5185\u5b58\uff0c\u957f\u5ea6\u4e3a 640 KB A000:0000 ~ A000:FFFF B000:0000 ~ B000:7FFF B800:0000 ~ B800:7FFF # \u6620\u5c04\u5230\u663e\u5361\u5185\u5b58 C000:0000 ~ C000:FFFF \u2026\u2026 F000:0000 ~ F000:FFFF # \u6620\u5c04\u5230 ROM(Read-Only-Memory) \u6620\u5c04\u662f\u5728\u7535\u8111\u542f\u52a8\u65f6\u6267\u884c ROM \u4e2d POST \u4ee3\u7801\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u7684; ROM \u4e2d\u8fd8\u5305\u62ec\u4e86 BIOS \u4ee3\u7801\uff0c\u5982 int 10h \u53ca int 16h \u4e2d\u65ad\u96c6\u5c31\u5b9a\u4e49\u5728 BIOS \u4e2d. code segment assume cs:code main: mov ax, 0B800h mov es, ax mov di, 0 mov al, 'A' mov ah, 71h # \u767d\u8272\u80cc\u666f\uff0c\u84dd\u8272\u524d\u666f mov cx, 2000 again: mov word ptr es:[di], ax # ax = 7141h add di, 2 sub cx, 1 jnz again end: mov ah, 1 int 21h # \u7b49\u5f85\u952e\u76d8\u6572\u952e mov ah, 4Ch int 21h code ends end main # C \u4e2d\u7684\u5b9e\u73b0 #include<stdio.h> int main() { unsigned char far *p; int i; p = (unsigned char far) } A000:0000 \u662f\u56fe\u5f62\u6a21\u5f0f (graphics mode) \u4e0b\u7684\u663e\u5361\u5730\u5740. mov ah, 0 mov al, 13h int 10h # \u628a\u663e\u5361\u5207\u6362\u5230 320 * 200 * 256 \u8272\u56fe\u5f62\u6a21\u5f0f # al = 12h \u8868\u793a 640 * 480 * 16 \u8272\u56fe\u5f62\u6a21\u5f0f # al = 3h \u8868\u793a (x, y) \u5750\u6807\u5bf9\u5e94\u7684\u663e\u5361\u504f\u79fb\u5730\u5740 = y * 320 + x.","title":"4.6"},{"location":"ASM/#413","text":"again: mov ds:[di], ax mov bx, 800h wait_wait: mov dx, 0 wait_a_while: sub ds, 1 jnz wait_a_while sub bx, 1 jnz wait_wait mov word ptr ds:[di], 0020h add di, 2 sub cx, 1 jnz again mov ah, 1 \u952e\u76d8\u8f93\u5165\u9664\u4e86\u53ef\u4ee5\u8c03\u7528 int 21h/ah = 01h \u5916\uff0c\u8fd8\u53ef\u4ee5\u8c03\u7528 int 16h/ah = 00h \u5c5e\u4e8e BIOS \u4e2d\u65ad. int 21h/ah = 01h \u4e0d\u80fd\u8bfb\u53d6\u4e0a\u4e0b\u5de6\u53f3\u65b9\u5411\u952e\u4e5f\u4e0d\u80fd\u8bfb\u53d6 PgUp PgDn Home End Insert Del F1~F12 \u8fd9\u4e9b\u952e. again: mov ah, 1 int 16h # \u68c0\u6d4b\u952e\u76d8\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u7a7a\uff0c\u82e5\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de ZF = 1\uff0c\u5426\u5219\u8fd4\u56de ZF = 0 jz no_key has_key: mov ah, 0 int 16h # ax = \u6240\u6572\u952e\u7684\u7f16\u7801\uff0c\u6b64\u5904\u4ece\u952e\u76d8\u7f13\u51b2\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u952e\uff0c\u6839\u636e\u6240\u6572\u7684\u952e\u6267\u884c\u4e0d\u540c\u7684\u5206\u652f no_key: jmp again draw: mov ax, [y] mov bp, 80 mul bp # dx:ax = ax * bp add ax, [x] add ax, ax # \u6216 shl ax, 1 mov bx, ax mov es:[bx], 1720h check_key: # \u5237\u65b0\u5c4f\u5e55\u753b\u9762 mov ah, 1 int 16h jnz has_key jmp check_key has_key cmp ax, 4800h je is_up cmp ax, 5000h je is_up cmp ax, 4B00h je is_up cmp ax, 4800h je is_up jmp exit is_up: cmp [y], 0 je check_key dec [y] jmp draw push ax / push word ptr ds:[bx] push eax / push dword ptr ds:[bx] push ah \u6216 push al \u662f\u9519\u8bef\u7684\u7528\u6cd5\uff0c\u56e0\u4e3a push \u7684\u64cd\u4f5c\u6570\u53ea\u80fd\u662f 16 \u4f4d\u6216 32 \u4f4d pop ax / pop word ptr ds:[bx] pop eax / pop dword ptr ds:[bx] \u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u65f6\uff0cdos \u4f1a\u5bf9\u4ee5\u4e0b\u5bc4\u5b58\u5668\u505a\u521d\u59cb\u5316\u8d4b\u503c\uff1a cs = code ip = offset main ss = stk sp = 200h ds = es = psp \u6bb5\u5730\u5740 psp \u662f\u7a0b\u5e8f\u6bb5\u524d\u7f00(program segment prefix) \u5b83\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 100h \u5b57\u8282\u7684\u5185\u5b58\u5757\uff0c\u4f4d\u4e8e\u5f53\u524d\u7a0b\u5e8f\u9996\u6bb5\u7684\u524d\u9762\uff0cpsp \u7531\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u7ed9\u5f53\u524d\u7a0b\u5e8f\uff0c\u91cc\u9762\u5b58\u653e\u4e86\u4e0e\u8be5 exe \u76f8\u5173\u7684\u4e00\u4e9b\u4fe1\u606f\u5982\u547d\u4ee4\u884c\u53c2\u6570 int main(int argc, char*argv[]) { } main.exe 123 xyz argv[0] [1] [2] data segment abc dw 1234,5678h data ends code segment assume cs:code, ds:data, ss:stk main: mov ax, data stk segment stack # \u5806\u6808\u6bb5\u53ea\u80fd\u5b9a\u4e49\u4e00\u4e2a db 200h dup('S') # \u6216\u5199\u6210 dw 100h dup('0') \u4e3a\u4e86\u5206\u914d\u7a7a\u95f4\u800c\u5199\u4e86\u4e00\u4e2a\u65e0\u540d\u6570\u7ec4 stk ends # \u7a0b\u5e8f\u521a\u5f00\u59cb\u8fd0\u884c\u65f6 ss = stk, sp = 200h end main \u5f53\u6e90\u7a0b\u5e8f\u6ca1\u6709\u5b9a\u4e49\u5806\u6808\u6bb5\u65f6\uff0css = \u9996\u6bb5\u7684\u6bb5\u5730\u5740 = 1000h\uff0c sp = 0 es: extra segment \u9644\u52a0\u6bb5","title":"4.13"},{"location":"ASM/#420","text":"OF DF IF TF SF ZF AF PF CF CF: \u8fdb\u4f4d\u6807\u5fd7(carry flag) mov ah, 0FFh add ah, 1 # ah = 0, CF = 1, \u4ea7\u751f\u4e86\u8fdb\u4f4d add ah, 2 # ah = 2, CF = 0 sub ah, 3 # ah = 0FFh, CF = 1, \u4ea7\u751f\u4e86\u9519\u4f4d \u79fb\u4f4d\u6307\u4ee4\u4e5f\u4f1a\u5f71\u54cd CF \u7684\u503c\uff0c\u6700\u540e\u79fb\u51fa\u53bb\u7684\u90a3\u4e00\u4f4d\u4f1a\u81ea\u52a8\u4fdd\u5b58\u5230 CF \u4e2d mov ah, 10110110B shr ah, 2 # \u8be5\u8bed\u6cd5\u8981\u6c42\u6e90\u4ee3\u7801\u6700\u524d\u9762\u52a0 .386\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6bb5\u5b9a\u4e49\u65f6 segment \u540e\u8ddf use16 mov cl, 2 shr ah, cl # \u53f3\u79fb 2 \u4f4d\uff0cCF = 1 \u4e0e CF \u76f8\u5173\u7684\u4e24\u6761\u8df3\u8f6c\u6307\u4ee4\uff1a jc\uff1a\u6709\u8fdb\u4f4d\u5219\u8df3\uff1bjnc\uff1a\u65e0\u8fdb\u4f4d\u5219\u8df3 adc\uff1a\u5e26\u8fdb\u4f4d\u52a0\uff1bclc: CF = 0; stc: CF = 1 ZF: \u96f6\u6807\u5fd7(zero flag) sub ax, ax # ax = 0, ZF = 1 add ax, 1 # ax = 1, ZF = 0 add ax, 0FFh # ax = 0, ZF = 1, CF = 1 jz is_zero # \u4f1a\u8fdb\u884c\u8df3\u8f6c\uff0c\u56e0\u4e3a\u5f53\u524d ZF == 1 \u4e0e jz \u76f8\u53cd\u7684\u6307\u4ee4\u662f jnz\uff0cjnz \u662f\u6839\u636e ZF == 0 \u4f5c\u51fa\u8df3\u8f6c jz \\equiv je; jnz \\equiv jne cmp ax, ax # cmp \u6307\u4ee4\u5185\u90e8\u505a\u4e86\u51cf\u6cd5\uff0c\u4f1a\u5f71\u54cd ZF \u7684\u72b6\u6001 jz/je is_equal \u4f1a\u8df3\u8f6c\u5230 is_equal int ax = 0x1234, bx = 0x1234, cx; cx = 1; if (ax != bx) cx = 0; # \u6ce8\u610f mov \u6307\u4ee4\u4e0d\u5f71\u54cd\u4efb\u4f55\u6807\u5fd7\u4f4d mov ax, 1234h mov bx, 1234h sub ax, bx # ZF = 1 mov bx = 1 # \u6b64 mov \u4e0d\u5f71\u54cd sub \u6307\u4ee4\u4ea7\u751f\u7684 ZF \u72b6\u6001 jz is_zero mov bx = 0 is_zero: SF: \u7b26\u53f7\u6807\u5fd7(sign flag)\uff0c\u5176\u5b9e\u5c31\u662f\u8fd0\u7b97\u7ed3\u679c\u7684\u6700\u9ad8\u4f4d mov ah, 7Fh add ah, 1 # ah = 80h = 1 000 0000B, SF = 1 sub ah, 1 # ah = 7Fh = 0111 1111B, SF = 0 jns positive # \u4f1a\u53d1\u751f\u8df3\u8f6c\uff0c\u56e0\u4e3a SF == 0 \u4e0e jns \u76f8\u53cd\u7684\u6307\u4ee4\u4e3a js\uff0cjs \u662f\u6839\u636e SF == 1 \u4f5c\u51fa\u8df3\u8f6c OF:\u6ea2\u51fa\u6807\u5fd7(overflow flag) mov ah, 7Fh add ah, 1 # ah = 80h, OF = 1, ZF = 0, CF = 0, SF = 1 mov ah, 80h add ah, 0FFh # ah = 7Fh, OF = 1, ZF = 0, CF = 1, SF = 0 mov ah, 80h sub ah, 1 # ah = 7Fh, OF = 1, ZF = 0, CF =0, SF = 0 OF \u4e5f\u6709\u4e24\u6761\u76f8\u5173\u7684\u6307\u4ee4\uff1ajo, jno \u6b63\u8d1f\u76f8\u52a0\u6c38\u4e0d\u6ea2\u51fa \u5de6\u79fb\u4e5f\u4f1a\u9020\u6210\u6ea2\u51fa mov ah, 81h # ah = 1000 0001B shl ah, 1 # ah = 0000 0010B, OF = 1, CF = 1 \u5de6\u79fb\u5bfc\u81f4\u7684\u6ea2\u51fa\u53ea\u8003\u8651\u79fb\u52a8 1 \u4f4d\uff0c\u53d6\u79fb\u4f4d\u540e\u7684\u6570\u7684\u6700\u9ad8\u4f4d\uff08\u5373\u539f\u6570\u636e\u7684\u6b21\u9ad8\u4f4d\uff09\u548c CF \uff08\u5373\u539f\u6570\u636e\u7684\u6700\u9ad8\u4f4d\u8fdb\u884c\uff09\u5f02\u6216\u8fd0\u7b97\u5f97\u5230 OF PF (Parity flag)\u5947\u5076\u6807\u5fd7 mov ah, 4 add ah, 1 # ah = 0000 0101B PF = 1 \u8868\u793a\u6709\u5076\u6570\u4e2a 1 mov ax, 0101h add ax, 0004h # ax = 0105h = 0000 0001 0000 0101B PF = 1; PF \u53ea\u7edf\u8ba1\u4f4e\u516b\u4f4d\u4e2d 1 \u7684\u4e2a\u6570 PF \u6709\u4e24\u6761\u76f8\u5173\u6307\u4ee4\uff1ajp (PF == 1 \u5219\u8df3)\uff1bjnp (PF == 0 \u5219\u8df3) \u5176\u4e2d jp \u4e5f\u53ef\u4ee5\u5199\u4f5c jpe (jump if parity even), jnp \u4e5f\u53ef\u4ee5\u5199\u4f5c jpo (jump if parity odd) \u5047\u5b9a\u8981\u53d1\u9001\u5b57\u7b26 'C' = 0 100 0011 B\uff0c\u73b0\u5047\u5b9a\u4f4e 7 \u4f4d\u4e3a\u6570\u636e\u4f4d\uff0c\u6700\u9ad8\u4f4d\u4e3a\u6821\u9a8c\u4f4d\uff0c\u90a3\u4e48\u6821\u9a8c\u4f4d\u7684\u8ba1\u7b97\u65b9\u6cd5\u6709 2 \u79cd\uff1a 1. \u5947\u6821\u9a8c\uff1a\u6570\u636e\u4f4d + \u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1 \u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5947\u6570\uff1b 2. \u5076\u6821\u9a8c\uff1a\u6570\u636e\u4f4d + \u6821\u9a8c\u4f4d\u5408\u8d77\u6765\uff0c1 \u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570\u3002 \u73b0\u91c7\u7528\u5076\u6821\u9a8c\u6765\u53d1\u9001 'C' \uff0c\u90a3\u4e48\u6821\u9a8c\u4f4d\u5fc5\u987b\u662f 1\uff0c\u5373\u5b9e\u9645\u53d1\u9001\u7684 8 \u4f4d\u4e8c\u8fdb\u5236\u503c\u4e3a 1 100 0011\uff0c\u5bf9\u65b9\u63a5\u53d7\u8fd9 8 \u4f4d\u503c\u5e76\u4fdd\u5b58\u5728\u5bc4\u5b58\u5668 al \u4e2d\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u6765\u9a8c\u8bc1 al \u4e2d\u7684\u503c\u662f\u5426\u6709\u9519\uff1a or al, al # \u6545\u610f\u4ea7\u751f\u8fd0\u7b97\uff0c\u8feb\u4f7f CPU \u7edf\u8ba1 al \u4e2d 1 \u7684\u4e2a\u6570 jnp error # if (PF == 0) goto error; good: error: or al, al jz iszero cmp al, 0 je iszero \u524d\u8005\u6548\u7387\u66f4\u9ad8 AF (Auxiliary Flag) \u8f85\u52a9\u8fdb\u4f4d\u6807\u5fd7 \u4f4e 4 \u4f4d\u5411\u9ad8 4 \u4f4d\u4ea7\u751f\u8fdb\u4f4d\u6216\u501f\u4f4d\uff0c\u4f8b\u5982\uff1a mov ah, 1Fh # 0001 1111 add ah, 1 # ah = 20h, AF = 1 AF \u548c BCD (Binary Coded Decimal)\u7801\u6709\u5173 mov al, 29h #\u5206\u949f add al, 08 # \u8fc7\u4e86 8 \u5206\u949f\uff0c31h daa # decimal adjust for addition \u52a0\u6cd5\u7684\u5341\u8fdb\u5236\u8c03\u6574 # \u8fd9\u6761\u6307\u4ee4\u4f1a\u6839\u636e AF = 1 \u6216 (al & 0Fh) > 9\uff0c\u505a\u4ee5\u4e0b\u8fd0\u7b97: # al = al + 6 \u4f7f\u5f97 al = 37h \u800c\u5b9e\u9645\u4e0a 29 + 8 = 37 # \u82e5 CF = 1 \u6216 al & 0F0h > 90h\uff0c\u5219 al += 60h","title":"4.20"},{"location":"ASM/#511","text":"\u8bbe\u6709\u4ee5\u4e0b\u5b9a\u4e49 x dd 3.14 y dq 5.67 \u73b0\u5728\u6267\u884c 1. fld x 2. fld y \u6d6e\u70b9\u72b6\u6001\u5bc4\u5b58\u5668\u7684\u7b2c 11 \u4f4d\u81f3\u7b2c 13 \u4f4d\u4fdd\u5b58\u4e86\u5f53\u524d\u6307\u9488\u5904\u7684\u7269\u7406\u7f16\u53f7 \u9664\u6cd5\u6ea2\u51fa","title":"5.11"},{"location":"ASM/#517","text":"\u4ee3\u7801\u590d\u5236\uff1a\u9700\u8981\u77e5\u9053\u4ee3\u7801\u5757\u7684\u8d77\u59cb\u5730\u5740\u548c\u4ee3\u7801\u5757\u7684\u957f\u5ea6 main: push cs pop ds push cs pop es cld mov ah, 2 mov dl, 'A' int 21h mov si, offset begin_flag mov di, 1000h mov cx, offset end_flag - offset begin_flag ; \u53ef\u8ba1\u7b97\u7684\u5e38\u6570 rep movsb mov cx, offset begin_flag - offset main mov di, offset main ; \u6bc1\u53bb\u4e4b\u524d\u8c03\u7528\u8fc7\u7684\u4ee3\u7801 mov bx, 1000h jmp bx begin_flag: jmp next ;\u56e0\u4e3a\u662f\u6807\u53f7\u800c\u4e0d\u6562\u5192\u9669\uff0c\u6545\u7559\u4e0b\u4e86 3 \u4e2a\u5b57\u8282\uff0c ;\u8fdb\u4e00\u6b65\u626b\u63cf\u53d1\u73b0 next \u5c31\u5728\u4e0b\u9762\uff0c\u4f46\u4ecd\u7559\u4e0b\u4e86 nop next: mov al, 0 rep stosb","title":"5.17"},{"location":"CSAPP/","text":"CSAPP:\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf 1.Overview \u7a0b\u5e8f\u5c31\u662f\u7531\u503c0\u548c1\u7ec4\u6210\u7684\u4f4d\uff0c\u53c8\u79f0 \u6bd4\u7279 (bit)\uff0c8\u4e2a\u4f4d\u88ab\u7ec4\u7ec7\u6210\u4e00\u7ec4\uff0c\u79f0\u4e3a \u5b57\u8282 (byte). \u53ea\u7531 ASCII \u5b57\u7b26\u6784\u6210\u7684\u6587\u4ef6\u79f0\u4e3a \u6587\u672c\u6587\u4ef6 \uff0c\u6240\u6709\u5176\u4ed6\u6587\u4ef6\u90fd\u79f0\u4e3a \u4e8c\u8fdb\u5236\u6587\u4ef6 . GCC\u7f16\u8bd1\u5668\u7ffb\u8bd1C\u7a0b\u5e8f\u6587\u4ef6\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u56db\u4e2a\u9636\u6bb5: \u9884\u5904\u7406\u9636\u6bb5 :\u9884\u5904\u7406\u5668(cpp)\u4f9d\u636e\u9884\u5904\u7406\u6307\u4ee4\u8fdb\u884c\u6587\u672c\u66ff\u6362\uff0c\u751f\u6210 .i \u6587\u4ef6. \u7f16\u8bd1\u9636\u6bb5 :\u7f16\u8bd1\u5668(ccl)\u5c06 .i \u6587\u4ef6\u7ffb\u8bd1\u4e3a .s \u6587\u4ef6\uff0c\u5176\u5305\u542b\u4e00\u4e2a\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f. \u6c47\u7f16\u9636\u6bb5 :\u6c47\u7f16\u5668(as)\u5c06.s\u6587\u4ef6\u7ffb\u8bd1\u4e3a\u673a\u5668\u8bed\u8a00\u6307\u4ee4\uff0c\u5e76\u5c06\u5176\u6253\u5305\u6210\u4e00\u79cd\u53eb\u505a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u7a0b\u5e8f (reloctable object program)\u7684\u683c\u5f0f\uff0c\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 .o \u6587\u4ef6\u4e2d. .o \u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6. \u94fe\u63a5\u9636\u6bb5 :\u94fe\u63a5\u5668(ld)\u8d1f\u8d23\u5c06\u5176\u4ed6 .o \u6587\u4ef6(\u6807\u51c6\u5e93\u7684\u51fd\u6570\u3001\u81ea\u5df1\u7f16\u5199\u7684\u5176\u4ed6\u7a0b\u5e8f\u7b49)\u4e0e\u6211\u4eec\u6c47\u7f16\u9636\u6bb5\u5f97\u5230\u7684 .o \u6587\u4ef6\u5408\u5e76\uff0c\u4ece\u800c\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6. gcc\u7f16\u8bd1\u547d\u4ee4\u884c\u53c2\u8003\u6b64\u7bc7\u6587\u7ae0 : GCC\u57fa\u672c\u4f7f\u7528 \u7cfb\u7edf\u7684\u786c\u4ef6\u7ec4\u6210 : - \u603b\u7ebf :\u643a\u5e26\u4fe1\u606f\u5b57\u8282\u5e76\u8d1f\u8d23\u5728\u5404\u4e2a\u90e8\u4ef6\u95f4\u4f20\u9012\uff0c\u5e38\u88ab\u8bbe\u8ba1\u4e3a\u4f20\u9001\u5b9a\u957f\u7684\u5b57\u8282\u5757\uff0c\u5373 \u5b57 (word)\uff0c\u5b57\u4e2d\u7684\u5b57\u8282\u957f(\u5373 \u5b57\u957f )\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u7cfb\u7edf\u53c2\u6570\uff0c\u5404\u4e2a\u7cfb\u7edf\u4e2d\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u5927\u591a\u6570\u4e3a4(32\u4f4d)\u62168(64\u4f4d). - I/O \u8bbe\u5907 :\u7cfb\u7edf\u4e0e\u5916\u754c\u8054\u7cfb\u7684\u901a\u9053.\u6bcf\u4e2a I/O \u8bbe\u5907\u90fd\u901a\u8fc7\u4e00\u4e2a \u63a7\u5236\u5668 \u6216 \u9002\u914d\u5668 \u4e0e I/O \u603b\u7ebf\u76f8\u8fde\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\u5c01\u88c5\u65b9\u5f0f.\u63a7\u5236\u5668\u662f I/O \u8bbe\u5907\u6216\u7cfb\u7edf\u4e3b\u5370\u5236\u7535\u8def\u677f( \u4e3b\u677f )\u4e0a\u7684\u82af\u7247\u7ec4\uff0c\u9002\u914d\u5668\u662f\u4e00\u5757\u63d2\u5728\u4e3b\u677f\u63d2\u69fd\u4e0a\u7684\u5361. - \u4e3b\u5b58 :\u4e34\u65f6\u5b58\u50a8\u8bbe\u5907\uff0c\u5728\u5904\u7406\u5668\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u7528\u6765\u5b58\u653e\u7a0b\u5e8f\u548c\u7a0b\u5e8f\u5904\u7406\u7684\u6570\u636e.\u7269\u7406\u5c42\u9762\uff0c\u4e3b\u5b58\u662f\u7531\u4e00\u7ec4 \u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668 (DRAM)\u82af\u7247\u7ec4\u6210\u7684.\u4ece\u903b\u8f91\u4e0a\u6765\u8bf4\uff0c\u5b58\u50a8\u5668\u662f\u4e00\u4e2a\u7ebf\u6027\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u6709\u552f\u4e00\u7684\u5730\u5740\uff0c\u4ece0\u5f00\u59cb. - \u5904\u7406\u5668 : \u4e2d\u592e\u5904\u7406\u5355\u5143 (CPU)\uff0c\u7b80\u79f0 \u5904\u7406\u5668 \uff0c\u662f\u89e3\u91ca(\u6216 \u6267\u884c )\u5b58\u50a8\u5728\u4e3b\u5b58\u4e2d\u6307\u4ee4\u7684\u5f15\u64ce.\u6838\u5fc3\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a\u4e00\u4e2a\u5b57\u7684\u5b58\u50a8\u8bbe\u5907(\u6216 \u5bc4\u5b58\u5668 )\uff0c\u79f0\u4e3a \u7a0b\u5e8f\u8ba1\u6570\u5668 (PC). \u5728\u4efb\u4f55\u65f6\u523b\uff0cPC\u90fd\u6307\u5411\u4e3b\u5b58\u4e2d\u7684\u67d0\u6761\u673a\u5668\u8bed\u8a00\u6307\u4ee4(\u5373\u542b\u6709\u8be5\u6761\u6307\u4ee4\u7684\u5730\u5740). \u5904\u7406\u5668\u662f\u6309\u7167 \u6307\u4ee4\u96c6\u67b6\u6784 \u51b3\u5b9a\u7684\u6307\u4ee4\u6267\u884c\u6a21\u578b\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f8\u90bb\u6267\u884c\u7684\u6307\u4ee4\u5185\u5b58\u4e2d\u672a\u5fc5\u76f8\u90bb. \u6307\u4ee4\u6307\u793a\u7684\u7b80\u5355\u64cd\u4f5c\u56f4\u7ed5\u7740\u4e3b\u5b58\u3001 \u5bc4\u5b58\u5668\u6587\u4ef6 (register file)\u548c \u7b97\u672f/\u903b\u8f91\u5355\u5143 (ALU)\u8fdb\u884c.\u5bc4\u5b58\u5668\u6587\u4ef6\u662f\u4e00\u4e2a\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u7531\uff0c\u4e00\u4e9b\u5355\u4e2a\u5b57\u957f\u7684\u5bc4\u5b58\u5668\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5bc4\u5b58\u5668\u540d\u5b57\u552f\u4e00. ALU \u8ba1\u7b97\u65b0\u7684\u6570\u636e\u548c\u5730\u5740\u503c. - \u4e00\u4e9b\u7b80\u5355\u64cd\u4f5c\u7684\u4f8b\u5b50 : - \u52a0\u8f7d :\u4ece\u4e3b\u5b58\u590d\u5236\u4e00\u4e2a\u5b57\u8282\u6216\u4e00\u4e2a\u5b57\u5230\u5bc4\u5b58\u5668\uff0c\u4ee5\u8986\u76d6\u5bc4\u5b58\u5668\u539f\u6765\u7684\u5185\u5bb9. - \u5b58\u50a8 :\u4ece\u5bc4\u5b58\u5668\u590d\u5236\u4e00\u4e2a\u5b57\u8282\u6216\u8005\u4e00\u4e2a\u5b57\u5230\u4e3b\u5b58\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u4ee5\u8986\u76d6\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u539f\u6765\u7684\u5185\u5bb9. - \u64cd\u4f5c :\u628a\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u590d\u5236\u5230 ALU \uff0c ALU \u5bf9\u8fd9\u4e24\u4e2a\u5b57\u505a\u7b97\u672f\u8fd0\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u653e\u5230\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4ee5\u8986\u76d6\u8be5\u5bc4\u5b58\u5668\u4e2d\u539f\u6765\u7684\u5185\u5bb9. - \u8df3\u8f6c :\u4ece\u6307\u4ee4\u672c\u8eab\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5b57\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5b57\u590d\u5236\u5230 PC \u4e2d\uff0c\u4ee5\u8986\u76d6 PC \u4e2d\u539f\u6765\u7684\u503c. \u5904\u7406\u5668\u7684\u6307\u4ee4\u96c6\u67b6\u6784\u4e0e\u5fae\u4f53\u7cfb\u7ed3\u6784\u662f\u6709\u533a\u522b\u7684\uff0c\u524d\u8005\u63cf\u8ff0\u6bcf\u6761\u673a\u5668\u4ee3\u7801\u6307\u4ee4\u7684\u6548\u679c\uff0c\u540e\u8005\u63cf\u8ff0\u5904\u7406\u5668\u5b9e\u9645\u4e0a\u5982\u4f55\u5b9e\u73b0. \u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668 (cache memory\uff0c\u7b80\u79f0\u4e3a cache \u6216\u9ad8\u901f\u7f13\u5b58) :\u4f5c\u4e3a\u6682\u65f6\u7684\u96c6\u7ed3\u533a\u57df\uff0c\u5b58\u653e\u5904\u7406\u5668\u8fd1\u671f\u53ef\u80fd\u9700\u8981\u7684\u4fe1\u606f. L1\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u6570\u4e07\u5b57\u8282\uff0c\u8bbf\u95ee\u901f\u5ea6\u51e0\u4e4e\u548c\u8bbf\u95ee\u5bc4\u5b58\u5668\u6587\u4ef6\u4e00\u6837\u5feb;L2\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u4e3a\u6570\u5341\u4e07\u5230\u6570\u767e\u4e07\u5b57\u8282\uff0c\u901a\u8fc7\u4e00\u6761\u7279\u6b8a\u7684\u603b\u7ebf\u8fde\u63a5\u5230\u5904\u7406\u5668.\u4e8c\u8005\u4f7f\u7528\u4e86 \u9759\u6001\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668 (SRAM)\u7684\u786c\u4ef6\u6280\u672f\u5b9e\u73b0. \u539f\u7406 :\u9ad8\u901f\u7f13\u5b58\u7684\u5c40\u90e8\u6027\u539f\u7406\uff0c\u5373\u7a0b\u5e8f\u5177\u6709\u8bbf\u95ee\u5c40\u90e8\u533a\u57df\u91cc\u7684\u6570\u636e\u548c\u4ee3\u7801\u7684\u8d8b\u52bf. \u6bcf\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u5b58\u50a8\u8bbe\u5907\u90fd\u88ab\u7ec4\u7ec7\u6210\u4e86\u4e00\u4e2a \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 \uff0c\u4e3b\u8981\u601d\u60f3\u662f\u4e0a\u4e00\u5c42\u7684\u5b58\u50a8\u5668\u4f5c\u4e3a\u7b2c\u4e00\u5c42\u5b58\u50a8\u5668\u7684\u9ad8\u901f\u7f13\u5b58. \u64cd\u4f5c\u7cfb\u7edf :\u89c6\u4f5c\u5e94\u7528\u7a0b\u5e8f\u548c\u8f6f\u4ef6\u4e4b\u95f4\u63d2\u5165\u7684\u4e00\u5c42\u8f6f\u4ef6\uff0c\u4e24\u4e2a\u57fa\u672c\u529f\u80fd:(1)\u9632\u6b62\u786c\u4ef6\u88ab\u5931\u63a7\u7684\u5e94\u7528\u7a0b\u5e8f\u6ee5\u7528;(2)\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7b80\u5355\u4e00\u81f4\u7684\u673a\u5236\u6765\u63a7\u5236\u590d\u6742\u800c\u53c8\u901a\u5e38\u5927\u4e0d\u76f8\u540c\u7684\u4f4e\u7ea7\u786c\u4ef6\u8bbe\u5907. \u8fdb\u7a0b :\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4e00\u79cd\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u4e2a\u7cfb\u7edf\u4e0a\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u8fdb\u7a0b\uff0c\u800c\u6bcf\u4e2a\u8fdb\u7a0b\u53c8\u597d\u50cf\u5728\u72ec\u5360\u5730\u4f7f\u7528\u786c\u4ef6.\u800c \u5e76\u53d1\u8fd0\u884c \u662f\u6307\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6307\u4ee4\u548c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6307\u4ee4\u662f\u4ea4\u9519\u6267\u884c\u7684.\u5927\u591a\u6570\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\u6570\u662f\u591a\u4e8e\u53ef\u4ee5\u8fd0\u884c\u5b83\u4eec\u7684 CPU \u4e2a\u6570\u7684.\u5e76\u53d1\u8fd0\u884c\u662f\u4f9d\u9760\u5904\u7406\u5668\u5728\u8fdb\u7a0b\u95f4\u5207\u6362\u6765\u5b9e\u73b0\u7684\uff0c\u8fd9\u79cd\u673a\u5236\u88ab\u79f0\u4e3a \u4e0a\u4e0b\u6587\u5207\u6362 .\u8fdb\u7a0b\u8f6c\u6362\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf \u5185\u6838 (kernel) \u7ba1\u7406\u7684\uff0c\u5b83\u662f\u7cfb\u7edf\u7ba1\u7406\u5168\u90e8\u8fdb\u7a0b\u6240\u7528\u4ee3\u7801\u4e0e\u6570\u636e\u7ed3\u6784\u7684\u96c6\u5408. \u7ebf\u7a0b :\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u79f0\u4e3a\u7ebf\u7a0b\u7684\u6267\u884c\u5355\u5143\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u8fd0\u884c\u5728\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e76\u5171\u4eab\u540c\u6837\u7684\u4ee3\u7801\u548c\u5168\u5c40\u6570\u636e. \u865a\u62df\u5185\u5b58 :\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u770b\u4f3c\u72ec\u5360\u4f7f\u7528\u4e3b\u5b58.\u6bcf\u4e2a\u8fdb\u7a0b\u770b\u5230\u7684\u5185\u5b58\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u79f0\u4e3a \u865a\u62df\u5730\u5740\u7a7a\u95f4 . \u4e0b\u56fe\u4e3a Linux \u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u56fe\u4e2d\u7684\u5730\u5740\u662f\u4ece\u4e0b\u5f80\u4e0a\u589e\u5927\u7684\uff0c\u6700\u4e0a\u9762\u7684\u533a\u57df\u662f\u4fdd\u7559\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\uff0c\u5e95\u90e8\u533a\u57df\u5b58\u653e\u7528\u6237\u8fdb\u7a0b\u5b9a\u4e49\u7684\u4ee3\u7801\u548c\u6570\u636e. \u81ea\u4e0b\u5f80\u4e0a\u4e3a: \u7a0b\u5e8f\u4ee3\u7801\u548c\u6570\u636e :\u4ee3\u7801\u4ece\u4e00\u56fa\u5b9a\u5730\u5740\u5f00\u59cb\uff0c\u4f46\u4e0d\u662f\u96f6\u5730\u5740.\u5f00\u59cb\u8fd0\u884c\u65f6\u5927\u5c0f\u5373\u88ab\u6307\u5b9a. \u5806 :\u5806\u7684\u5927\u5c0f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6269\u5c55\u548c\u6536\u7f29(\u5982\u8c03\u7528 malloc \u548c free). \u5171\u4eab\u5e93 :\u5b58\u653e\u7c7b\u4f3c\u4e8e C \u6807\u51c6\u5e93\u548c\u6570\u5b66\u5e93\u8fd9\u6837\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\u533a\u57df. \u6808 :\u4f4d\u4e8e\u7528\u6237\u865a\u62df\u5730\u5740\u7a7a\u95f4\u9876\u90e8\u7684\u662f \u7528\u6237\u6808 \uff0c\u7f16\u8bd1\u5668\u7528\u5b83\u6765\u5b9e\u73b0\u51fd\u6570\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u52a8\u6001\u7684\u6269\u5f20\u548c\u6536\u7f29\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u589e\u957f\uff0c\u8fd4\u56de\u51fd\u6570\u65f6\u6536\u7f29. \u5185\u6838\u865a\u62df\u5185\u5b58 :\u5730\u5740\u7a7a\u95f4\u9876\u90e8\u7684\u533a\u57df\u662f\u4e3a\u5185\u6838\u4fdd\u7559\u7684\uff0c\u4e0d\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8bfb\u5199\u8fd9\u4e2a\u533a\u57df\u7684\u5185\u5bb9\u6216\u8005\u76f4\u63a5\u8c03\u7528\u5185\u6838\u4ee3\u7801\u5b9a\u4e49\u7684\u51fd\u6570.\u76f8\u53cd\uff0c\u5176\u5fc5\u987b\u8c03\u7528\u5185\u6838\u6765\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c. \u6587\u4ef6 :\u5b57\u8282\u5e8f\u5217.\u6bcf\u4e2a I/O \u8bbe\u5907\u90fd\u53ef\u4ee5\u88ab\u89c6\u4f5c\u6587\u4ef6\uff0c\u4ee5\u4e00\u4e2a\u7edf\u4e00\u7684\u89c6\u89d2\u6765\u5904\u7406 I/O \u8bbe\u5907. \u4ece\u4e00\u4e2a\u5355\u72ec\u7684\u7cfb\u7edf\u6765\u770b\uff0c \u7f51\u7edc \u4e5f\u53ef\u89c6\u4e3a\u4e00\u4e2a I/O \u8bbe\u5907. Amdahl \u5b9a\u5f8b(Amdahl's law):\u8bbe\u7cfb\u7edf\u6267\u884c\u67d0\u5e94\u7528\u7a0b\u5e8f\u7684\u539f\u65f6\u95f4\u4e3a \\(T_{old}\\) \uff0c\u5047\u8bbe\u7cfb\u7edf\u67d0\u90e8\u5206\u6267\u884c\u6240\u9700\u65f6\u95f4\u4e0e\u8be5\u65f6\u95f4\u7684\u6bd4\u4f8b\u4e3a \\(\\alpha\\) \uff0c\u800c\u8be5\u90e8\u5206\u6027\u80fd\u63d0\u5347\u6bd4\u4f8b\u4e3a \\(k\\) .\u5219\u603b\u7684\u6267\u884c\u65f6\u95f4 [ T{new} = T_{old}((1 - \\(\\alpha\\) ) + \\(\\alpha\\) /k ) ] \u8ba1\u7b97\u52a0\u901f\u6bd4 \\(S = T_{old}/T_{new}\\) \u4e3a [ S = frac{1}{(1 - \\(\\alpha\\) ) + \\(\\alpha\\) /k } ] \u5e76\u53d1 :\u4e00\u4e2a\u540c\u65f6\u5177\u6709\u591a\u4e2a\u6d3b\u52a8\u7684\u7cfb\u7edf. \u5e76\u884c :\u7528\u5e76\u53d1\u4f7f\u4e00\u4e2a\u7cfb\u7edf\u8fd0\u884c\u7684\u66f4\u5feb. \u7ebf\u7a0b\u7ea7\u5e76\u53d1 :\u4f9d\u8d56\u4e8e \u591a\u5904\u7406\u5668\u7cfb\u7edf .\u800c\u591a\u5904\u7406\u5668\u7cfb\u7edf\u7684\u666e\u53ca\u4f9d\u8d56\u4e8e \u591a\u6838\u5904\u7406\u5668 \u548c \u8d85\u7ebf\u7a0b (hyperthreading). \u591a\u6838\u5904\u7406\u5668 \u662f\u5c06\u591a\u4e2a CPU \u96c6\u6210\u5230\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u82af\u7247\u4e0a. \u8d85\u7ebf\u7a0b \uff0c\u6709\u65f6\u4e5f\u79f0 \u540c\u65f6\u591a\u7ebf\u7a0b \uff0c\u8be5\u6280\u672f\u5141\u8bb8\u4e00\u4e2a CPU \u6267\u884c\u591a\u4e2a\u63a7\u5236\u6d41\u7684\u64cd\u4f5c.\u8d85\u7ebf\u7a0b\u7684\u5904\u7406\u5668\u53ef\u4ee5\u5728\u5355\u4e2a\u65f6\u949f\u5468\u671f\u7684\u57fa\u7840\u4e0a\u51b3\u5b9a\u8981\u6267\u884c\u54ea\u4e00\u4e2a\u7ebf\u7a0b. \u6307\u4ee4\u7ea7\u5e76\u884c :\u73b0\u4ee3\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u591a\u6761\u6307\u4ee4\u7684\u5c5e\u6027. \u6d41\u6c34\u7ebf :\u5728\u6d41\u6c34\u7ebf\u4e2d\uff0c\u5c06\u6267\u884c\u4e00\u6761\u6307\u4ee4\u6240\u9700\u8981\u7684\u6d3b\u52a8\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u6b65\u9aa4\uff0c\u5c06\u5904\u7406\u5668\u7684\u786c\u4ef6\u7ec4\u7ec7\u6210\u4e00\u7cfb\u5217\u7684\u9636\u6bb5\uff0c\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u4e00\u4e2a\u6b65\u9aa4. \u5982\u679c\u5904\u7406\u5668\u53ef\u4ee5\u8fbe\u5230\u6bd4\u4e00\u4e2a\u5468\u671f\u4e00\u6761\u6307\u4ee4\u66f4\u5feb\u7684\u6267\u884c\u6548\u7387\uff0c\u5c31\u79f0\u4e4b\u4e3a \u8d85\u6807\u91cf (superscalar)\u5904\u7406\u5668. \u5355\u6307\u4ee4\u3001\u591a\u6570\u636e\u5e76\u884c :\u5373 SIMD \u5e76\u884c\uff0c\u5927\u591a\u662f\u4e3a\u4e86\u63d0\u9ad8\u5904\u7406\u5f71\u50cf\u3001\u58f0\u97f3\u548c\u89c6\u9891\u6570\u636e\u5e94\u7528\u7684\u6267\u884c\u901f\u5ea6. \u62bd\u8c61 \u4f7f\u6211\u4eec\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u6a21\u578b\u53bb\u9690\u85cf\u5b9e\u9645\u5b9e\u73b0\u7684\u590d\u6742\u6027.","title":"CSAPP"},{"location":"CSAPP/#csapp","text":"","title":"CSAPP:\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf"},{"location":"CSAPP/#1overview","text":"\u7a0b\u5e8f\u5c31\u662f\u7531\u503c0\u548c1\u7ec4\u6210\u7684\u4f4d\uff0c\u53c8\u79f0 \u6bd4\u7279 (bit)\uff0c8\u4e2a\u4f4d\u88ab\u7ec4\u7ec7\u6210\u4e00\u7ec4\uff0c\u79f0\u4e3a \u5b57\u8282 (byte). \u53ea\u7531 ASCII \u5b57\u7b26\u6784\u6210\u7684\u6587\u4ef6\u79f0\u4e3a \u6587\u672c\u6587\u4ef6 \uff0c\u6240\u6709\u5176\u4ed6\u6587\u4ef6\u90fd\u79f0\u4e3a \u4e8c\u8fdb\u5236\u6587\u4ef6 . GCC\u7f16\u8bd1\u5668\u7ffb\u8bd1C\u7a0b\u5e8f\u6587\u4ef6\u5230\u53ef\u6267\u884c\u6587\u4ef6\u7684\u56db\u4e2a\u9636\u6bb5: \u9884\u5904\u7406\u9636\u6bb5 :\u9884\u5904\u7406\u5668(cpp)\u4f9d\u636e\u9884\u5904\u7406\u6307\u4ee4\u8fdb\u884c\u6587\u672c\u66ff\u6362\uff0c\u751f\u6210 .i \u6587\u4ef6. \u7f16\u8bd1\u9636\u6bb5 :\u7f16\u8bd1\u5668(ccl)\u5c06 .i \u6587\u4ef6\u7ffb\u8bd1\u4e3a .s \u6587\u4ef6\uff0c\u5176\u5305\u542b\u4e00\u4e2a\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f. \u6c47\u7f16\u9636\u6bb5 :\u6c47\u7f16\u5668(as)\u5c06.s\u6587\u4ef6\u7ffb\u8bd1\u4e3a\u673a\u5668\u8bed\u8a00\u6307\u4ee4\uff0c\u5e76\u5c06\u5176\u6253\u5305\u6210\u4e00\u79cd\u53eb\u505a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u7a0b\u5e8f (reloctable object program)\u7684\u683c\u5f0f\uff0c\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 .o \u6587\u4ef6\u4e2d. .o \u6587\u4ef6\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6. \u94fe\u63a5\u9636\u6bb5 :\u94fe\u63a5\u5668(ld)\u8d1f\u8d23\u5c06\u5176\u4ed6 .o \u6587\u4ef6(\u6807\u51c6\u5e93\u7684\u51fd\u6570\u3001\u81ea\u5df1\u7f16\u5199\u7684\u5176\u4ed6\u7a0b\u5e8f\u7b49)\u4e0e\u6211\u4eec\u6c47\u7f16\u9636\u6bb5\u5f97\u5230\u7684 .o \u6587\u4ef6\u5408\u5e76\uff0c\u4ece\u800c\u5f97\u5230\u53ef\u6267\u884c\u6587\u4ef6. gcc\u7f16\u8bd1\u547d\u4ee4\u884c\u53c2\u8003\u6b64\u7bc7\u6587\u7ae0 : GCC\u57fa\u672c\u4f7f\u7528 \u7cfb\u7edf\u7684\u786c\u4ef6\u7ec4\u6210 : - \u603b\u7ebf :\u643a\u5e26\u4fe1\u606f\u5b57\u8282\u5e76\u8d1f\u8d23\u5728\u5404\u4e2a\u90e8\u4ef6\u95f4\u4f20\u9012\uff0c\u5e38\u88ab\u8bbe\u8ba1\u4e3a\u4f20\u9001\u5b9a\u957f\u7684\u5b57\u8282\u5757\uff0c\u5373 \u5b57 (word)\uff0c\u5b57\u4e2d\u7684\u5b57\u8282\u957f(\u5373 \u5b57\u957f )\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u7cfb\u7edf\u53c2\u6570\uff0c\u5404\u4e2a\u7cfb\u7edf\u4e2d\u90fd\u4e0d\u5c3d\u76f8\u540c\uff0c\u5927\u591a\u6570\u4e3a4(32\u4f4d)\u62168(64\u4f4d). - I/O \u8bbe\u5907 :\u7cfb\u7edf\u4e0e\u5916\u754c\u8054\u7cfb\u7684\u901a\u9053.\u6bcf\u4e2a I/O \u8bbe\u5907\u90fd\u901a\u8fc7\u4e00\u4e2a \u63a7\u5236\u5668 \u6216 \u9002\u914d\u5668 \u4e0e I/O \u603b\u7ebf\u76f8\u8fde\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\u5c01\u88c5\u65b9\u5f0f.\u63a7\u5236\u5668\u662f I/O \u8bbe\u5907\u6216\u7cfb\u7edf\u4e3b\u5370\u5236\u7535\u8def\u677f( \u4e3b\u677f )\u4e0a\u7684\u82af\u7247\u7ec4\uff0c\u9002\u914d\u5668\u662f\u4e00\u5757\u63d2\u5728\u4e3b\u677f\u63d2\u69fd\u4e0a\u7684\u5361. - \u4e3b\u5b58 :\u4e34\u65f6\u5b58\u50a8\u8bbe\u5907\uff0c\u5728\u5904\u7406\u5668\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u7528\u6765\u5b58\u653e\u7a0b\u5e8f\u548c\u7a0b\u5e8f\u5904\u7406\u7684\u6570\u636e.\u7269\u7406\u5c42\u9762\uff0c\u4e3b\u5b58\u662f\u7531\u4e00\u7ec4 \u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668 (DRAM)\u82af\u7247\u7ec4\u6210\u7684.\u4ece\u903b\u8f91\u4e0a\u6765\u8bf4\uff0c\u5b58\u50a8\u5668\u662f\u4e00\u4e2a\u7ebf\u6027\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u6709\u552f\u4e00\u7684\u5730\u5740\uff0c\u4ece0\u5f00\u59cb. - \u5904\u7406\u5668 : \u4e2d\u592e\u5904\u7406\u5355\u5143 (CPU)\uff0c\u7b80\u79f0 \u5904\u7406\u5668 \uff0c\u662f\u89e3\u91ca(\u6216 \u6267\u884c )\u5b58\u50a8\u5728\u4e3b\u5b58\u4e2d\u6307\u4ee4\u7684\u5f15\u64ce.\u6838\u5fc3\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a\u4e00\u4e2a\u5b57\u7684\u5b58\u50a8\u8bbe\u5907(\u6216 \u5bc4\u5b58\u5668 )\uff0c\u79f0\u4e3a \u7a0b\u5e8f\u8ba1\u6570\u5668 (PC). \u5728\u4efb\u4f55\u65f6\u523b\uff0cPC\u90fd\u6307\u5411\u4e3b\u5b58\u4e2d\u7684\u67d0\u6761\u673a\u5668\u8bed\u8a00\u6307\u4ee4(\u5373\u542b\u6709\u8be5\u6761\u6307\u4ee4\u7684\u5730\u5740). \u5904\u7406\u5668\u662f\u6309\u7167 \u6307\u4ee4\u96c6\u67b6\u6784 \u51b3\u5b9a\u7684\u6307\u4ee4\u6267\u884c\u6a21\u578b\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u76f8\u90bb\u6267\u884c\u7684\u6307\u4ee4\u5185\u5b58\u4e2d\u672a\u5fc5\u76f8\u90bb. \u6307\u4ee4\u6307\u793a\u7684\u7b80\u5355\u64cd\u4f5c\u56f4\u7ed5\u7740\u4e3b\u5b58\u3001 \u5bc4\u5b58\u5668\u6587\u4ef6 (register file)\u548c \u7b97\u672f/\u903b\u8f91\u5355\u5143 (ALU)\u8fdb\u884c.\u5bc4\u5b58\u5668\u6587\u4ef6\u662f\u4e00\u4e2a\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u7531\uff0c\u4e00\u4e9b\u5355\u4e2a\u5b57\u957f\u7684\u5bc4\u5b58\u5668\u7ec4\u6210\uff0c\u6bcf\u4e2a\u5bc4\u5b58\u5668\u540d\u5b57\u552f\u4e00. ALU \u8ba1\u7b97\u65b0\u7684\u6570\u636e\u548c\u5730\u5740\u503c. - \u4e00\u4e9b\u7b80\u5355\u64cd\u4f5c\u7684\u4f8b\u5b50 : - \u52a0\u8f7d :\u4ece\u4e3b\u5b58\u590d\u5236\u4e00\u4e2a\u5b57\u8282\u6216\u4e00\u4e2a\u5b57\u5230\u5bc4\u5b58\u5668\uff0c\u4ee5\u8986\u76d6\u5bc4\u5b58\u5668\u539f\u6765\u7684\u5185\u5bb9. - \u5b58\u50a8 :\u4ece\u5bc4\u5b58\u5668\u590d\u5236\u4e00\u4e2a\u5b57\u8282\u6216\u8005\u4e00\u4e2a\u5b57\u5230\u4e3b\u5b58\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u4ee5\u8986\u76d6\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u539f\u6765\u7684\u5185\u5bb9. - \u64cd\u4f5c :\u628a\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u590d\u5236\u5230 ALU \uff0c ALU \u5bf9\u8fd9\u4e24\u4e2a\u5b57\u505a\u7b97\u672f\u8fd0\u7b97\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u653e\u5230\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\uff0c\u4ee5\u8986\u76d6\u8be5\u5bc4\u5b58\u5668\u4e2d\u539f\u6765\u7684\u5185\u5bb9. - \u8df3\u8f6c :\u4ece\u6307\u4ee4\u672c\u8eab\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5b57\uff0c\u5e76\u5c06\u8fd9\u4e2a\u5b57\u590d\u5236\u5230 PC \u4e2d\uff0c\u4ee5\u8986\u76d6 PC \u4e2d\u539f\u6765\u7684\u503c. \u5904\u7406\u5668\u7684\u6307\u4ee4\u96c6\u67b6\u6784\u4e0e\u5fae\u4f53\u7cfb\u7ed3\u6784\u662f\u6709\u533a\u522b\u7684\uff0c\u524d\u8005\u63cf\u8ff0\u6bcf\u6761\u673a\u5668\u4ee3\u7801\u6307\u4ee4\u7684\u6548\u679c\uff0c\u540e\u8005\u63cf\u8ff0\u5904\u7406\u5668\u5b9e\u9645\u4e0a\u5982\u4f55\u5b9e\u73b0. \u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668 (cache memory\uff0c\u7b80\u79f0\u4e3a cache \u6216\u9ad8\u901f\u7f13\u5b58) :\u4f5c\u4e3a\u6682\u65f6\u7684\u96c6\u7ed3\u533a\u57df\uff0c\u5b58\u653e\u5904\u7406\u5668\u8fd1\u671f\u53ef\u80fd\u9700\u8981\u7684\u4fe1\u606f. L1\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u6570\u4e07\u5b57\u8282\uff0c\u8bbf\u95ee\u901f\u5ea6\u51e0\u4e4e\u548c\u8bbf\u95ee\u5bc4\u5b58\u5668\u6587\u4ef6\u4e00\u6837\u5feb;L2\u9ad8\u901f\u7f13\u5b58\u5bb9\u91cf\u4e3a\u6570\u5341\u4e07\u5230\u6570\u767e\u4e07\u5b57\u8282\uff0c\u901a\u8fc7\u4e00\u6761\u7279\u6b8a\u7684\u603b\u7ebf\u8fde\u63a5\u5230\u5904\u7406\u5668.\u4e8c\u8005\u4f7f\u7528\u4e86 \u9759\u6001\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668 (SRAM)\u7684\u786c\u4ef6\u6280\u672f\u5b9e\u73b0. \u539f\u7406 :\u9ad8\u901f\u7f13\u5b58\u7684\u5c40\u90e8\u6027\u539f\u7406\uff0c\u5373\u7a0b\u5e8f\u5177\u6709\u8bbf\u95ee\u5c40\u90e8\u533a\u57df\u91cc\u7684\u6570\u636e\u548c\u4ee3\u7801\u7684\u8d8b\u52bf. \u6bcf\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u5b58\u50a8\u8bbe\u5907\u90fd\u88ab\u7ec4\u7ec7\u6210\u4e86\u4e00\u4e2a \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 \uff0c\u4e3b\u8981\u601d\u60f3\u662f\u4e0a\u4e00\u5c42\u7684\u5b58\u50a8\u5668\u4f5c\u4e3a\u7b2c\u4e00\u5c42\u5b58\u50a8\u5668\u7684\u9ad8\u901f\u7f13\u5b58. \u64cd\u4f5c\u7cfb\u7edf :\u89c6\u4f5c\u5e94\u7528\u7a0b\u5e8f\u548c\u8f6f\u4ef6\u4e4b\u95f4\u63d2\u5165\u7684\u4e00\u5c42\u8f6f\u4ef6\uff0c\u4e24\u4e2a\u57fa\u672c\u529f\u80fd:(1)\u9632\u6b62\u786c\u4ef6\u88ab\u5931\u63a7\u7684\u5e94\u7528\u7a0b\u5e8f\u6ee5\u7528;(2)\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7b80\u5355\u4e00\u81f4\u7684\u673a\u5236\u6765\u63a7\u5236\u590d\u6742\u800c\u53c8\u901a\u5e38\u5927\u4e0d\u76f8\u540c\u7684\u4f4e\u7ea7\u786c\u4ef6\u8bbe\u5907. \u8fdb\u7a0b :\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u4e00\u79cd\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u4e00\u79cd\u62bd\u8c61\uff0c\u4e00\u4e2a\u7cfb\u7edf\u4e0a\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u8fdb\u7a0b\uff0c\u800c\u6bcf\u4e2a\u8fdb\u7a0b\u53c8\u597d\u50cf\u5728\u72ec\u5360\u5730\u4f7f\u7528\u786c\u4ef6.\u800c \u5e76\u53d1\u8fd0\u884c \u662f\u6307\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6307\u4ee4\u548c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u7684\u6307\u4ee4\u662f\u4ea4\u9519\u6267\u884c\u7684.\u5927\u591a\u6570\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\u6570\u662f\u591a\u4e8e\u53ef\u4ee5\u8fd0\u884c\u5b83\u4eec\u7684 CPU \u4e2a\u6570\u7684.\u5e76\u53d1\u8fd0\u884c\u662f\u4f9d\u9760\u5904\u7406\u5668\u5728\u8fdb\u7a0b\u95f4\u5207\u6362\u6765\u5b9e\u73b0\u7684\uff0c\u8fd9\u79cd\u673a\u5236\u88ab\u79f0\u4e3a \u4e0a\u4e0b\u6587\u5207\u6362 .\u8fdb\u7a0b\u8f6c\u6362\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf \u5185\u6838 (kernel) \u7ba1\u7406\u7684\uff0c\u5b83\u662f\u7cfb\u7edf\u7ba1\u7406\u5168\u90e8\u8fdb\u7a0b\u6240\u7528\u4ee3\u7801\u4e0e\u6570\u636e\u7ed3\u6784\u7684\u96c6\u5408. \u7ebf\u7a0b :\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u6709\u591a\u4e2a\u79f0\u4e3a\u7ebf\u7a0b\u7684\u6267\u884c\u5355\u5143\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u8fd0\u884c\u5728\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e76\u5171\u4eab\u540c\u6837\u7684\u4ee3\u7801\u548c\u5168\u5c40\u6570\u636e. \u865a\u62df\u5185\u5b58 :\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u770b\u4f3c\u72ec\u5360\u4f7f\u7528\u4e3b\u5b58.\u6bcf\u4e2a\u8fdb\u7a0b\u770b\u5230\u7684\u5185\u5b58\u90fd\u662f\u4e00\u81f4\u7684\uff0c\u79f0\u4e3a \u865a\u62df\u5730\u5740\u7a7a\u95f4 . \u4e0b\u56fe\u4e3a Linux \u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u56fe\u4e2d\u7684\u5730\u5740\u662f\u4ece\u4e0b\u5f80\u4e0a\u589e\u5927\u7684\uff0c\u6700\u4e0a\u9762\u7684\u533a\u57df\u662f\u4fdd\u7559\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\uff0c\u5e95\u90e8\u533a\u57df\u5b58\u653e\u7528\u6237\u8fdb\u7a0b\u5b9a\u4e49\u7684\u4ee3\u7801\u548c\u6570\u636e. \u81ea\u4e0b\u5f80\u4e0a\u4e3a: \u7a0b\u5e8f\u4ee3\u7801\u548c\u6570\u636e :\u4ee3\u7801\u4ece\u4e00\u56fa\u5b9a\u5730\u5740\u5f00\u59cb\uff0c\u4f46\u4e0d\u662f\u96f6\u5730\u5740.\u5f00\u59cb\u8fd0\u884c\u65f6\u5927\u5c0f\u5373\u88ab\u6307\u5b9a. \u5806 :\u5806\u7684\u5927\u5c0f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u5730\u6269\u5c55\u548c\u6536\u7f29(\u5982\u8c03\u7528 malloc \u548c free). \u5171\u4eab\u5e93 :\u5b58\u653e\u7c7b\u4f3c\u4e8e C \u6807\u51c6\u5e93\u548c\u6570\u5b66\u5e93\u8fd9\u6837\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\u533a\u57df. \u6808 :\u4f4d\u4e8e\u7528\u6237\u865a\u62df\u5730\u5740\u7a7a\u95f4\u9876\u90e8\u7684\u662f \u7528\u6237\u6808 \uff0c\u7f16\u8bd1\u5668\u7528\u5b83\u6765\u5b9e\u73b0\u51fd\u6570\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u52a8\u6001\u7684\u6269\u5f20\u548c\u6536\u7f29\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u589e\u957f\uff0c\u8fd4\u56de\u51fd\u6570\u65f6\u6536\u7f29. \u5185\u6838\u865a\u62df\u5185\u5b58 :\u5730\u5740\u7a7a\u95f4\u9876\u90e8\u7684\u533a\u57df\u662f\u4e3a\u5185\u6838\u4fdd\u7559\u7684\uff0c\u4e0d\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8bfb\u5199\u8fd9\u4e2a\u533a\u57df\u7684\u5185\u5bb9\u6216\u8005\u76f4\u63a5\u8c03\u7528\u5185\u6838\u4ee3\u7801\u5b9a\u4e49\u7684\u51fd\u6570.\u76f8\u53cd\uff0c\u5176\u5fc5\u987b\u8c03\u7528\u5185\u6838\u6765\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c. \u6587\u4ef6 :\u5b57\u8282\u5e8f\u5217.\u6bcf\u4e2a I/O \u8bbe\u5907\u90fd\u53ef\u4ee5\u88ab\u89c6\u4f5c\u6587\u4ef6\uff0c\u4ee5\u4e00\u4e2a\u7edf\u4e00\u7684\u89c6\u89d2\u6765\u5904\u7406 I/O \u8bbe\u5907. \u4ece\u4e00\u4e2a\u5355\u72ec\u7684\u7cfb\u7edf\u6765\u770b\uff0c \u7f51\u7edc \u4e5f\u53ef\u89c6\u4e3a\u4e00\u4e2a I/O \u8bbe\u5907. Amdahl \u5b9a\u5f8b(Amdahl's law):\u8bbe\u7cfb\u7edf\u6267\u884c\u67d0\u5e94\u7528\u7a0b\u5e8f\u7684\u539f\u65f6\u95f4\u4e3a \\(T_{old}\\) \uff0c\u5047\u8bbe\u7cfb\u7edf\u67d0\u90e8\u5206\u6267\u884c\u6240\u9700\u65f6\u95f4\u4e0e\u8be5\u65f6\u95f4\u7684\u6bd4\u4f8b\u4e3a \\(\\alpha\\) \uff0c\u800c\u8be5\u90e8\u5206\u6027\u80fd\u63d0\u5347\u6bd4\u4f8b\u4e3a \\(k\\) .\u5219\u603b\u7684\u6267\u884c\u65f6\u95f4 [ T{new} = T_{old}((1 - \\(\\alpha\\) ) + \\(\\alpha\\) /k ) ] \u8ba1\u7b97\u52a0\u901f\u6bd4 \\(S = T_{old}/T_{new}\\) \u4e3a [ S = frac{1}{(1 - \\(\\alpha\\) ) + \\(\\alpha\\) /k } ] \u5e76\u53d1 :\u4e00\u4e2a\u540c\u65f6\u5177\u6709\u591a\u4e2a\u6d3b\u52a8\u7684\u7cfb\u7edf. \u5e76\u884c :\u7528\u5e76\u53d1\u4f7f\u4e00\u4e2a\u7cfb\u7edf\u8fd0\u884c\u7684\u66f4\u5feb. \u7ebf\u7a0b\u7ea7\u5e76\u53d1 :\u4f9d\u8d56\u4e8e \u591a\u5904\u7406\u5668\u7cfb\u7edf .\u800c\u591a\u5904\u7406\u5668\u7cfb\u7edf\u7684\u666e\u53ca\u4f9d\u8d56\u4e8e \u591a\u6838\u5904\u7406\u5668 \u548c \u8d85\u7ebf\u7a0b (hyperthreading). \u591a\u6838\u5904\u7406\u5668 \u662f\u5c06\u591a\u4e2a CPU \u96c6\u6210\u5230\u4e00\u4e2a\u96c6\u6210\u7535\u8def\u82af\u7247\u4e0a. \u8d85\u7ebf\u7a0b \uff0c\u6709\u65f6\u4e5f\u79f0 \u540c\u65f6\u591a\u7ebf\u7a0b \uff0c\u8be5\u6280\u672f\u5141\u8bb8\u4e00\u4e2a CPU \u6267\u884c\u591a\u4e2a\u63a7\u5236\u6d41\u7684\u64cd\u4f5c.\u8d85\u7ebf\u7a0b\u7684\u5904\u7406\u5668\u53ef\u4ee5\u5728\u5355\u4e2a\u65f6\u949f\u5468\u671f\u7684\u57fa\u7840\u4e0a\u51b3\u5b9a\u8981\u6267\u884c\u54ea\u4e00\u4e2a\u7ebf\u7a0b. \u6307\u4ee4\u7ea7\u5e76\u884c :\u73b0\u4ee3\u5904\u7406\u5668\u53ef\u4ee5\u540c\u65f6\u6267\u884c\u591a\u6761\u6307\u4ee4\u7684\u5c5e\u6027. \u6d41\u6c34\u7ebf :\u5728\u6d41\u6c34\u7ebf\u4e2d\uff0c\u5c06\u6267\u884c\u4e00\u6761\u6307\u4ee4\u6240\u9700\u8981\u7684\u6d3b\u52a8\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u6b65\u9aa4\uff0c\u5c06\u5904\u7406\u5668\u7684\u786c\u4ef6\u7ec4\u7ec7\u6210\u4e00\u7cfb\u5217\u7684\u9636\u6bb5\uff0c\u6bcf\u4e2a\u9636\u6bb5\u6267\u884c\u4e00\u4e2a\u6b65\u9aa4. \u5982\u679c\u5904\u7406\u5668\u53ef\u4ee5\u8fbe\u5230\u6bd4\u4e00\u4e2a\u5468\u671f\u4e00\u6761\u6307\u4ee4\u66f4\u5feb\u7684\u6267\u884c\u6548\u7387\uff0c\u5c31\u79f0\u4e4b\u4e3a \u8d85\u6807\u91cf (superscalar)\u5904\u7406\u5668. \u5355\u6307\u4ee4\u3001\u591a\u6570\u636e\u5e76\u884c :\u5373 SIMD \u5e76\u884c\uff0c\u5927\u591a\u662f\u4e3a\u4e86\u63d0\u9ad8\u5904\u7406\u5f71\u50cf\u3001\u58f0\u97f3\u548c\u89c6\u9891\u6570\u636e\u5e94\u7528\u7684\u6267\u884c\u901f\u5ea6. \u62bd\u8c61 \u4f7f\u6211\u4eec\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u6a21\u578b\u53bb\u9690\u85cf\u5b9e\u9645\u5b9e\u73b0\u7684\u590d\u6742\u6027.","title":"1.Overview"},{"location":"LinearAlgebra/","text":"\u7ebf\u6027\u4ee3\u6570","title":"LinearAlgebra"},{"location":"LinearAlgebra/#_1","text":"","title":"\u7ebf\u6027\u4ee3\u6570"},{"location":"links/","text":"\u4f60\u6765\u5230\u4e86\u6ca1\u6709\u4eba\u7684\u8352\u539f","title":"\u53cb\u94fe\u55b5"},{"location":"links/#_1","text":"","title":"\u4f60\u6765\u5230\u4e86\u6ca1\u6709\u4eba\u7684\u8352\u539f"}]}